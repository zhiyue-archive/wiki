<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Wiki]]></title>
  <subtitle><![CDATA[整理 记录 分享]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wiki.printf.me/"/>
  <updated>2015-05-09T07:56:56.259Z</updated>
  <id>http://wiki.printf.me/</id>
  
  <author>
    <name><![CDATA[zhiyue]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python标准库 数学与随机数 (math包，random包)]]></title>
    <link href="http://wiki.printf.me/2015/05/09/python-standard-library-of-math-and-random/"/>
    <id>http://wiki.printf.me/2015/05/09/python-standard-library-of-math-and-random/</id>
    <published>2015-05-09T15:44:47.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>时间点：</p>
<ul>
<li>2015-05-09 第一次编辑， 增加 <a href="http://www.cnblogs.com/vamei/" target="_blank" rel="external">Vamei</a>的文章</li>
</ul>
<p>todo:</p>
<ul>
<li>整合文章内容</li>
</ul>
<hr>
<p>我们已经在<a href="http://www.cnblogs.com/vamei/archive/2012/05/29/2524376.html" target="_blank" rel="external">Python运算中</a>看到Python最基本的数学运算功能。此外，<strong>math</strong>包补充了更多的函数。当然，如果想要更加高级的数学功能，可以考虑选择标准库之外的<strong>numpy</strong>和<strong>scipy</strong>项目，它们不但支持数组和矩阵运算，还有丰富的数学和物理方程可供使用。</p>
<p>此外，<strong>random包</strong>可以用来生成<strong>随机数</strong>。随机数不仅可以用于数学用途，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p>
<h2 id="math包">math包</h2><hr>
<p>math包主要处理数学相关的运算。math包定义了两个常数:</p>
<pre><code>math.<span class="literal">e</span>   <span class="comment"># 自然常数e</span>
math.<span class="literal">pi</span>  <span class="comment"># 圆周率pi</span>
</code></pre><p>此外，math包还有各种运算函数 (下面函数的功能可以参考数学手册)：</p>
<pre><code>math.<span class="built_in">ceil</span>(x)       <span class="preprocessor"># 对x向上取整，比如x=1.2，返回2</span>
math.<span class="built_in">floor</span>(x)      <span class="preprocessor"># 对x向下取整，比如x=1.2，返回1</span>
math.<span class="built_in">pow</span>(x,y)      <span class="preprocessor"># 指数运算，得到x的y次方</span>
math.<span class="built_in">log</span>(x)        <span class="preprocessor"># 对数，默认基底为e。可以使用base参数，来改变对数的基地。比如math.log(100,base=10)</span>
math.<span class="built_in">sqrt</span>(x)       <span class="preprocessor"># 平方根</span>
</code></pre><p>三角函数: <code>math.sin(x), math.cos(x), math.tan(x), math.asin(x), math.acos(x), math.atan(x)</code></p>
<p>这些函数都接收一个弧度(radian)为单位的x作为参数。</p>
<p>角度和弧度互换: <code>math.degrees(x), math.radians(x)</code></p>
<p>双曲函数: <code>math.sinh(x), math.cosh(x), math.tanh(x), math.asinh(x), math.acosh(x), math.atanh(x)</code></p>
<p>特殊函数： <code>math.erf(x), math.gamma(x)</code></p>
<h2 id="random包">random包</h2><hr>
<p>如果你已经了解伪随机数(psudo-random number)的原理，那么你可以使用如下:</p>
<pre><code>random.<span class="function"><span class="title">seed</span><span class="params">(x)</span></span>
</code></pre><p>来改变随机数生成器的种子seed。<strong>如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed</strong>。</p>
<ul>
<li>随机挑选和排序</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random.choice(seq)   <span class="comment">#从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</span></span><br><span class="line">random.sample(seq,k) <span class="comment"># 从序列中随机挑选k个元素</span></span><br><span class="line">random.shuffle(seq)  <span class="comment"># 将序列的所有元素随机排序</span></span><br></pre></td></tr></table></figure>
<ul>
<li>随机生成实数</li>
</ul>
<p>下面生成的实数符合均匀分布(uniform distribution)，意味着某个范围内的每个数字出现的概率相等:</p>
<pre><code><span class="built_in">random</span>.<span class="built_in">random</span>()          <span class="comment"># 随机生成下一个实数，它在[0,1)范围内。</span>
<span class="built_in">random</span>.uniform(<span class="operator">a</span>,b)      <span class="comment"># 随机生成下一个实数，它在[a,b]范围内。</span>
</code></pre><p>下面生成的实数符合其它的分布 (你可以参考一些统计方面的书籍来了解这些分布):</p>
<pre><code><span class="built_in">random</span>.gauss(mu,sigma)    <span class="comment"># 随机生成符合高斯分布的随机数，mu,sigma为高斯分布的两个参数。 </span>
<span class="built_in">random</span>.expovariate(lambd) <span class="comment"># 随机生成符合指数分布的随机数，lambd为指数分布的参数。</span>
</code></pre><p>此外还有对数分布，正态分布，Pareto分布，Weibull分布，可参考下面链接:<br><a href="http://docs.python.org/library/random.html" target="_blank" rel="external">http://docs.python.org/library/random.html</a></p>
<p>假设我们有一群人参加舞蹈比赛，为了公平起见，我们要随机排列他们的出场顺序。我们下面利用random包实现：</p>
<pre><code>import random
all_people = [<span class="string">'Tom'</span>, <span class="string">'Vivian'</span>, <span class="string">'Paul'</span>, <span class="string">'Liya'</span>, <span class="string">'Manu'</span>, <span class="string">'Daniel'</span>, <span class="string">'Shawn'</span>]
random.<span class="function"><span class="title">shuffle</span><span class="params">(all_people)</span></span>
<span class="keyword">for</span> <span class="tag">i</span>,name <span class="keyword">in</span> <span class="function"><span class="title">enumerate</span><span class="params">(all_people)</span></span>:
    <span class="function"><span class="title">print</span><span class="params">(i,<span class="string">':'</span>+name)</span></span>
</code></pre><h3 id="练习">练习</h3><hr>
<p>设计下面两种彩票号码生成器:</p>
<ol>
<li><p>从1到22中随机抽取5个整数 （这5个数字不重复）</p>
</li>
<li><p>随机产生一个8位数字，每位数字都可以是1到6中的任意一个整数。 </p>
</li>
</ol>
<h2 id="总结">总结</h2><hr>
<pre><code>math.<span class="function"><span class="title">floor</span><span class="params">()</span></span>, math.<span class="function"><span class="title">sqrt</span><span class="params">()</span></span>, math.<span class="function"><span class="title">sin</span><span class="params">()</span></span>, math.<span class="function"><span class="title">degrees</span><span class="params">()</span></span>

random.<span class="function"><span class="title">random</span><span class="params">()</span></span>, random.<span class="function"><span class="title">choice</span><span class="params">()</span></span>, random.<span class="function"><span class="title">shuffle</span><span class="params">()</span></span>
</code></pre><p>原文：<a href="http://www.cnblogs.com/vamei/archive/2012/10/26/2741702.html" target="_blank" rel="external">Python标准库12 数学与随机数 (math包，random包)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间点：</p>
<ul>
<li>2015-05-09 第一次编辑， 增加 <a href="http://www.cnblogs.com/vamei/" target="_blank" rel="external">Vamei</a>的文章</li>
</ul>
<p>]]>
    </summary>
    
      <category term="Python" scheme="http://wiki.printf.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python入门之正则表达式]]></title>
    <link href="http://wiki.printf.me/2015/05/01/python-patten-match/"/>
    <id>http://wiki.printf.me/2015/05/01/python-patten-match/</id>
    <published>2015-05-01T16:59:38.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>在前面我们已经搞定了怎样获取页面的内容，不过还差一步，这么多杂乱的代码夹杂文字我们怎样把它提取出来整理呢？下面就开始介绍一个十分强大的工具，正则表达式！</p>
<h2 id="0x01了解正则表达式">0x01了解正则表达式</h2><blockquote>
<p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>
</blockquote>
<p>正则表达式是用来匹配字符串非常强大的工具，在其他编程语言中同样有正则表达式的概念，Python同样不例外，利用了正则表达式，我们想要从返回的页面内容提取出我们想要的内容就易如反掌了。</p>
<blockquote>
<p>正则表达式的大致匹配过程是：<br>1.依次拿出表达式和文本中的字符比较，<br>2.如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。<br>3.如果表达式中有量词或边界，这个过程会稍微有一些不同。</p>
</blockquote>
<h2 id="0x02正则表达式的语法规则">0x02正则表达式的语法规则</h2><p>下面是Python中正则表达式的一些匹配规则，图片资料来自CSDN<br><img src="http://7xilqm.com1.z0.glb.clouddn.com/pattern_match/20130515113723855-e1424095177180.png" alt="此处输入图片的描述"></p>
<h2 id="0x03正则表达式相关注解">0x03正则表达式相关注解</h2><ul>
<li><strong>数量词的贪婪模式与非贪婪模式</strong><br>正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab<em>”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab</em>?”，将找到”a”。</li>
</ul>
<blockquote>
<p>注：我们一般使用非贪婪模式来提取。</p>
</blockquote>
<ul>
<li><strong>反斜杠问题</strong><br>与大多数编程语言相同，正则表达式里使用”\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠<code>\\\\</code>：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。</li>
</ul>
<p>Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用<code>r”\\”</code>表示。同样，匹配一个数字的<code>”\\d</code>”可以写成<code>r”\d”</code>。有了原生字符串，妈妈也不用担心是不是漏写了反斜杠，写出来的表达式也更直观勒。</p>
<h2 id="0x04Python_Re模块">0x04Python Re模块</h2><p>Python 自带了re模块，它提供了对正则表达式的支持。主要用到的方法列举如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回pattern对象</span></span><br><span class="line">re.compile(string[,flag])</span><br><span class="line"><span class="comment">#以下为匹配所用函数</span></span><br><span class="line">re.match(pattern, string[, flags])</span><br><span class="line">re.search(pattern, string[, flags])</span><br><span class="line">re.split(pattern, string[, maxsplit])</span><br><span class="line">re.findall(pattern, string[, flags])</span><br><span class="line">re.finditer(pattern, string[, flags])</span><br><span class="line">re.sub(pattern, repl, string[, count])</span><br><span class="line">re.subn(pattern, repl, string[, count])</span><br></pre></td></tr></table></figure>
<p>在介绍这几个方法之前，我们先来介绍一下pattern的概念，pattern可以理解为一个匹配模式，那么我们怎么获得这个匹配模式呢？很简单，我们需要利用re.compile方法就可以。例如</p>
<pre><code>pattern = re.compile(<span class="string">r'hello'</span>)
</code></pre><p>在参数中我们传入了原生字符串对象，通过compile方法编译生成一个<code>pattern对象</code>，然后我们利用这个对象来进行进一步的匹配。</p>
<p>另外大家可能注意到了另一个参数 flags，在这里解释一下这个参数的含义：</p>
<p>参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如<code>re.I | re.M</code>。</p>
<p>可选值有：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">• re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）</span><br><span class="line">• re.M(全拼：MULTILINE): 多行模式，改变<span class="string">'^'</span>和<span class="string">'$'</span>的行为（参见上图）</span><br><span class="line">• re.S(全拼：DOTALL): 点任意匹配模式，改变<span class="string">'.'</span>的行为</span><br><span class="line">• re.L(全拼：LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</span><br><span class="line">• re.U(全拼：UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</span><br><span class="line">• re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</span><br></pre></td></tr></table></figure></p>
<p>在刚才所说的另外几个方法例如 re.match 里我们就需要用到这个pattern了，下面我们一一介绍。</p>
<blockquote>
<p>注：以下七个方法中的flags同样是代表匹配模式的意思，如果在pattern生成时已经指明了flags，那么在下面的方法中就不需要传入这个参数了。</p>
</blockquote>
<ul>
<li><strong>re.match(pattern, string[, flags])</strong><br>这个方法将会从string（我们要匹配的字符串）的开头开始，尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止，不再对string向后匹配。下面我们通过一个例子理解一下</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">'CQC'</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#导入re模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将正则表达式编译成Pattern对象，注意hello前面的r的意思是“原生字符串”</span></span><br><span class="line">pattern = re.compile(<span class="string">r'hello'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用re.match匹配文本，获得匹配结果，无法匹配时将返回None</span></span><br><span class="line">result1 = re.match(pattern,<span class="string">'hello'</span>)</span><br><span class="line">result2 = re.match(pattern,<span class="string">'helloo CQC!'</span>)</span><br><span class="line">result3 = re.match(pattern,<span class="string">'helo CQC!'</span>)</span><br><span class="line">result4 = re.match(pattern,<span class="string">'hello CQC!'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果1匹配成功</span></span><br><span class="line"><span class="keyword">if</span> result1:</span><br><span class="line">    <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">    <span class="keyword">print</span> result1.group()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'1匹配失败！'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果2匹配成功</span></span><br><span class="line"><span class="keyword">if</span> result2:</span><br><span class="line">    <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">    <span class="keyword">print</span> result2.group()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'2匹配失败！'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果3匹配成功</span></span><br><span class="line"><span class="keyword">if</span> result3:</span><br><span class="line">    <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">    <span class="keyword">print</span> result3.group()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'3匹配失败！'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果4匹配成功</span></span><br><span class="line"><span class="keyword">if</span> result4:</span><br><span class="line">    <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">    <span class="keyword">print</span> result4.group()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'4匹配失败！'</span></span><br></pre></td></tr></table></figure>
<p>运行结果<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hello</span></span><br><span class="line">hello</span><br><span class="line"><span class="number">3</span>匹配失败！</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></p>
<p>匹配分析</p>
<ol>
<li><p>第一个匹配，pattern正则表达式为’hello’，我们匹配的目标字符串string也为hello，从头至尾完全匹配，匹配成功。</p>
</li>
<li><p>第二个匹配，string为helloo CQC，从string头开始匹配pattern完全可以匹配，pattern匹配结束，同时匹配终止，后面的oCQC不再匹配，返回匹配成功的信息。</p>
</li>
<li><p>第三个匹配，string为helo CQC，从string头开始匹配pattern，发现到 ‘o’ 时无法完成匹配，匹配终止，返回None</p>
</li>
<li><p>第四个匹配，同第二个匹配原理，即使遇到了空格符也不会受影响。</p>
</li>
</ol>
<p>我们还看到最后打印出了result.group()，这个是什么意思呢？下面我们说一下关于match对象的的属性和方法<br>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>
<blockquote>
<p>属性：<br>1.string: 匹配时使用的文本。<br>2.re: 匹配时使用的Pattern对象。<br>3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。<br>4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。<br>5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。<br>6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。<br>方法：<br>1.group([group1, …]):<br>获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。<br>2.groups([default]):<br>以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。<br>3.groupdict([default]):<br>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。<br>4.start([group]):<br>返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。<br>5.end([group]):<br>返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。<br>6.span([group]):<br>返回(start(group), end(group))。<br>7.expand(template):<br>将匹配到的分组代入template中然后返回。template中可以使用\id或\g、\g引用分组，但不能使用编号0。\id与\g是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g0。</p>
</blockquote>
<p>下面我们用一个例子来体会一下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#一个简单的match实例</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 匹配如下内容：单词+空格+单词+任意字符</span></span><br><span class="line">m = re.match(<span class="string">r'(\w+) (\w+)(?P.*)'</span>, <span class="string">'hello world!'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.string:"</span>, m.string</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.re:"</span>, m.re</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.pos:"</span>, m.pos</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.endpos:"</span>, m.endpos</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.lastindex:"</span>, m.lastindex</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.lastgroup:"</span>, m.lastgroup</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.group():"</span>, m.group()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.group(1,2):"</span>, m.group(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.groups():"</span>, m.groups()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.groupdict():"</span>, m.groupdict()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.start(2):"</span>, m.start(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.end(2):"</span>, m.end(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.span(2):"</span>, m.span(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">r"m.expand(r'\g \g\g'):"</span>, m.expand(<span class="string">r'\2 \1\3'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### output ###</span></span><br><span class="line"><span class="comment"># m.string: hello world!</span></span><br><span class="line"><span class="comment"># m.re: </span></span><br><span class="line"><span class="comment"># m.pos: 0</span></span><br><span class="line"><span class="comment"># m.endpos: 12</span></span><br><span class="line"><span class="comment"># m.lastindex: 3</span></span><br><span class="line"><span class="comment"># m.lastgroup: sign</span></span><br><span class="line"><span class="comment"># m.group(1,2): ('hello', 'world')</span></span><br><span class="line"><span class="comment"># m.groups(): ('hello', 'world', '!')</span></span><br><span class="line"><span class="comment"># m.groupdict(): &#123;'sign': '!'&#125;</span></span><br><span class="line"><span class="comment"># m.start(2): 6</span></span><br><span class="line"><span class="comment"># m.end(2): 11</span></span><br><span class="line"><span class="comment"># m.span(2): (6, 11)</span></span><br><span class="line"><span class="comment"># m.expand(r'\2 \1\3'): world hello!</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>re.search(pattern, string[, flags])</strong><br>search方法与match方法极其类似，区别在于match()函数只检测re是不是在string的开始位置匹配，search()会扫描整个string查找匹配，match（）只有在0位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，match()就返回None。同样，search方法的返回对象同样match()返回对象的方法和属性。我们用一个例子感受一下</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入re模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将正则表达式编译成Pattern对象</span></span><br><span class="line">pattern = re.compile(<span class="string">r'world'</span>)</span><br><span class="line"><span class="comment"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None</span></span><br><span class="line"><span class="comment"># 这个例子中使用match()无法成功匹配</span></span><br><span class="line">match = re.search(pattern,<span class="string">'hello world!'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">    <span class="keyword">print</span> match.group()</span><br><span class="line"><span class="comment">### 输出 ###</span></span><br><span class="line"><span class="comment"># world</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>re.split(pattern, string[, maxsplit])</strong><br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。我们通过下面的例子感受一下。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"><span class="keyword">print</span> re.split(pattern,<span class="string">'one1two2three3four4'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### 输出 ###</span></span><br><span class="line"><span class="comment"># ['one', 'two', 'three', 'four', '']</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>re.findall(pattern, string[, flags])</strong><br>搜索string，以列表形式返回全部能匹配的子串。我们通过这个例子来感受一下</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"><span class="keyword">print</span> re.findall(pattern,<span class="string">'one1two2three3four4'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### 输出 ###</span></span><br><span class="line"><span class="comment"># ['1', '2', '3', '4']</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>re.finditer(pattern, string[, flags])</strong><br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。我们通过下面的例子来感受一下</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(pattern,<span class="string">'one1two2three3four4'</span>):</span><br><span class="line">    <span class="keyword">print</span> m.group(),</span><br><span class="line"> </span><br><span class="line"><span class="comment">### 输出 ###</span></span><br><span class="line"><span class="comment"># 1 2 3 4</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>re.sub(pattern, repl, string[, count])</strong><br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。<ul>
<li>当repl是一个字符串时，可以使用\id或\g、\g引用分组，但不能使用编号0。</li>
<li>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。</li>
</ul>
</li>
<li>count用于指定最多替换次数，不指定时全部替换。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'i say, hello world!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> re.sub(pattern,<span class="string">r'\2 \1'</span>, s)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> re.sub(pattern,func, s)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### output ###</span></span><br><span class="line"><span class="comment"># say i, world hello!</span></span><br><span class="line"><span class="comment"># I Say, Hello World!</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>re.subn(pattern, repl, string[, count])</strong><br>返回 (sub(repl, string[, count]), 替换次数)。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'i say, hello world!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> re.subn(pattern,<span class="string">r'\2 \1'</span>, s)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> re.subn(pattern,func, s)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### output ###</span></span><br><span class="line"><span class="comment"># ('say i, world hello!', 2)</span></span><br><span class="line"><span class="comment"># ('I Say, Hello World!', 2)</span></span><br></pre></td></tr></table></figure>
<h2 id="0x05Python_Re模块的另一种使用方式">0x05Python Re模块的另一种使用方式</h2><p>在上面我们介绍了7个工具方法，例如match，search等等，不过调用方式都是 re.match，re.search的方式，其实还有另外一种调用方式，可以通过pattern.match，pattern.search调用，这样调用便不用将pattern作为第一个参数传入了，大家想怎样调用皆可。</p>
<ul>
<li>函数API列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])</span><br><span class="line">search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])</span><br><span class="line">split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])</span><br><span class="line">findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])</span><br><span class="line">finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])</span><br><span class="line">sub(repl, string[, count]) | re.sub(pattern, repl, string[, count])</span><br><span class="line">subn(repl, string[, count]) |re.sub(pattern, repl, string[, count])</span><br></pre></td></tr></table></figure>
<p>具体的调用方法不必详说了，原理都类似，只是参数的变化不同。</p>
<p>参考：<br>原文：<a href="http://cuiqingcai.com/977.html" target="_blank" rel="external">Python爬虫入门七之正则表达式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在前面我们已经搞定了怎样获取页面的内容，不过还差一步，这么多杂乱的代码夹杂文字我们怎样把它提取出来整理呢？下面就开始介绍一个十分强大的工具，正则表达式！</p>
<h2 id="0x01了解正则表达式">0x01了解正则表达式</h2><blockquote>
<p>正则表]]>
    </summary>
    
      <category term="Python" scheme="http://wiki.printf.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Python 风格指南]]></title>
    <link href="http://wiki.printf.me/2015/05/01/google-python-styleguide/"/>
    <id>http://wiki.printf.me/2015/05/01/google-python-styleguide/</id>
    <published>2015-05-01T01:36:25.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><p>Python是一种对代码风格很重视的语言，从缩进就能看出这一点，Python强调易于理解。最近在负责代码重构的工作，为了统一大家的代码风格，制订规范，学习了一下网上这份Google的Python风格指南。</p>
</li>
<li><p>原文地址： <a href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html" target="_blank" rel="external">http://google-styleguide.googlecode.com/svn/trunk/pyguide.html</a></p>
</li>
</ul>
</blockquote>
<h2 id="背景">背景</h2><p>Python 是 Google主要的脚本语言。这本风格指南主要包含的是针对python的编程准则。<br>为帮助读者能够将代码准确格式化，我们提供了针对 Vim的配置文件 。对于Emacs用户，保持默认设置即可。</p>
<h2 id="Python语言规范">Python语言规范</h2><h3 id="pylint">pylint</h3><blockquote>
<p>Tip<br>对你的代码运行pylint</p>
</blockquote>
<p><strong>定义:</strong><br>pylint是一个在Python源代码中查找bug的工具. 对于C和C++这样的不那么动态的(译者注: 原文是less dynamic)语言, 这些bug通常由编译器来捕获. 由于Python的动态特性, 有些警告可能不对. 不过伪告警应该很少.<br><strong>优点:</strong><br>可以捕获容易忽视的错误, 例如输入错误, 使用未赋值的变量等.<br><strong>缺点:</strong><br>pylint不完美. 要利用其优势, 我们有时侯需要: a) 围绕着它来写代码 b) 抑制其告警 c) 改进它, 或者d) 忽略它.<br><strong>结论:</strong><br>确保对你的代码运行pylint.抑制不准确的警告,以便能够将其他警告暴露出来。<br>你可以通过设置一个行注释来抑制告警. 例如:</p>
<pre><code><span class="title">dict</span> = <span class="string">'something awful'</span>  <span class="comment"># Bad Idea... pylint: disable=redefined-builtin</span>
</code></pre><p>pylint警告是以一个数字编号(如 <code>C0112</code> )和一个符号名(如 <code>empty-docstring</code> )来标识的. 在编写新代码或更新已有代码时对告警进行医治, 推荐使用符号名来标识.</p>
<p>如果警告的符号名不够见名知意，那么请对其增加一个详细解释。</p>
<p>采用这种抑制方式的好处是我们可以轻松查找抑制并回顾它们.</p>
<p>你可以使用命令 <code>pylint --list-msgs</code> 来获取pylint告警列表. 你可以使用命令 <code>pylint --help-msg=C6409</code> , 以获取关于特定消息的更多信息.</p>
<p>相比较于之前使用的 <code>pylint: disable-msg</code> , 本文推荐使用 <code>pylint: disable .</code></p>
<p>要抑制”参数未使用”告警, 你可以用”<em>”作为参数标识符, 或者在参数名前加”unused</em>”. 遇到不能改变参数名的情况, 你可以通过在函数开头”提到”它们来消除告警. 例如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, unused_b, unused_c, d=None, e=None)</span>:</span></span><br><span class="line">    _ = d, e</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure></p>
<h3 id="导入">导入</h3><blockquote>
<p>Tip<br>仅对包和模块使用导入</p>
</blockquote>
<p><strong>定义:</strong><br>模块间共享代码的重用机制.<br><strong>优点:</strong><br>命名空间管理约定十分简单. 每个标识符的源都用一种一致的方式指示. x.Obj表示Obj对象定义在模块x中.<br><strong>缺点:</strong><br>模块名仍可能冲突. 有些模块名太长, 不太方便.<br><strong>结论:</strong><br>使用 <code>import x</code> 来导入包和模块.</p>
<p>使用 <code>from x import y</code> , 其中x是包前缀, y是不带前缀的模块名.</p>
<p>使用 <code>from x import y as z</code>, 如果两个要导入的模块都叫做z或者y太长了.</p>
<p>例如, 模块 s<code>ound.effects.echo</code> 可以用如下方式导入:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br><span class="line">...</span><br><span class="line">echo.EchoFilter(input, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.</p>
<h3 id="包">包</h3><blockquote>
<p>Tip<br>使用模块的全路径名来导入每个模块</p>
</blockquote>
<p><strong>优点:</strong><br>避免模块名冲突. 查找包更容易.<br><strong>缺点:</strong><br>部署代码变难, 因为你必须复制包层次.<br><strong>结论:</strong><br>所有的新代码都应该用完整包名来导入每个模块.</p>
<p>应该像下面这样导入:<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">Reference</span> <span class="keyword">in</span> code <span class="keyword">with</span> complete name.</span><br><span class="line">import sound.effects.echo</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Reference</span> <span class="keyword">in</span> code <span class="keyword">with</span> just <span class="keyword">module</span> name (preferred).</span><br><span class="line"><span class="keyword">from</span> sound.effects import echo</span><br></pre></td></tr></table></figure></p>
<h3 id="异常">异常</h3><blockquote>
<p>Tip<br>允许使用异常, 但必须小心</p>
</blockquote>
<p><strong>定义:</strong><br>异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.<br><strong>优点:</strong><br>正常操作代码的控制流不会和错误处理代码混在一起. 当某种条件发生时, 它也允许控制流跳过多个框架. 例如, 一步跳出N个嵌套的函数, 而不必继续执行错误的代码.<br><strong>缺点:</strong><br>可能会导致让人困惑的控制流. 调用库时容易错过错误情况.<br><strong>结论:</strong><br>异常必须遵守特定条件:</p>
<ol>
<li><p>像这样触发异常: <code>raise MyException(&quot;Error message&quot;)</code> 或者 <code>raise MyException</code> . 不要使用两个参数的形式( <code>raise MyException, &quot;Error message&quot;</code> )或者过时的字符串异常( <code>raise &quot;Error message&quot;</code> ).</p>
</li>
<li><p>模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类应该叫做”Error”.</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>永远不要使用 <code>except:</code> 语句来捕获所有异常, 也不要捕获 <code>Exception</code> 或者 <code>StandardError</code> , 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容, <code>except:</code> 真的会捕获包括Python语法错误在内的任何错误. 使用 <code>except:</code> 很容易隐藏真正的bug.</p>
</li>
<li><p>尽量减少try/except块中的代码量. try块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, try/except块将隐藏真正的错误.</p>
</li>
<li><p>使用finally子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.<br>当捕获异常时, 使用 as 而不要用逗号. 例如</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Error</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> error:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="全局变量">全局变量</h3><blockquote>
<p>Tip<br>避免全局变量</p>
</blockquote>
<p><strong>定义:</strong><br>定义在模块级的变量.<br><strong>优点:</strong><br>偶尔有用.<br><strong>缺点:</strong><br>导入时可能改变模块行为, 因为导入模块时会对模块级变量赋值.<br>结论:<br>避免使用全局变量, 用类变量来代替. 但也有一些例外:</p>
<ol>
<li>脚本的默认选项.</li>
<li>模块级常量. 例如:　PI = 3.14159. 常量应该全大写, 用下划线连接.</li>
<li>有时候用全局变量来缓存值或者作为函数返回值很有用.</li>
<li>如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.</li>
</ol>
<h3 id="嵌套_局部_内部类或函数">嵌套 局部 内部类或函数</h3><blockquote>
<p>Tip<br>鼓励使用嵌套/本地/内部类或函数</p>
</blockquote>
<p><strong>定义:</strong><br>类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的.<br><strong>优点:</strong><br>允许定义仅用于有效范围的工具类和函数.<br><strong>缺点:</strong><br>嵌套类或局部类的实例不能序列化(pickled).<br><strong>结论:</strong><br>推荐使用.</p>
<h3 id="列表推导_List_Comprehensions">列表推导 List Comprehensions</h3><blockquote>
<p>Tip<br>可以在简单情况下使用</p>
</blockquote>
<p><strong>定义:</strong><br>列表推导(list comprehensions)与生成器表达式(generator expression)提供了一种简洁高效的方式来创建列表和迭代器, 而不必借助map(), filter(), 或者lambda.<br><strong>优点:</strong><br>简单的列表推导可以比其它的列表创建方法更加清晰简单. 生成器表达式可以十分高效, 因为它们避免了创建整个列表.<br><strong>缺点:</strong><br>复杂的列表推导或者生成器表达式可能难以阅读.<br><strong>结论:</strong><br>适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">      <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">          <span class="keyword">if</span> x * y &gt; <span class="number">10</span>:</span><br><span class="line">              result.append((x, y))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">      <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">          <span class="keyword">if</span> x != y:</span><br><span class="line">              <span class="keyword">for</span> z <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">                  <span class="keyword">if</span> y != z:</span><br><span class="line">                      <span class="keyword">yield</span> (x, y, z)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((x, complicated_transform(x))</span><br><span class="line">          <span class="keyword">for</span> x <span class="keyword">in</span> long_generator_function(parameter)</span><br><span class="line">          <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">  squares = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">  eat(jelly_bean <span class="keyword">for</span> jelly_bean <span class="keyword">in</span> jelly_beans</span><br><span class="line">      <span class="keyword">if</span> jelly_bean.color == <span class="string">'black'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">No</span>:</span><br><span class="line">  <span class="literal">result</span> = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="type">range</span>(<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="type">range</span>(<span class="number">5</span>) <span class="keyword">if</span> x * y &gt; <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((x, y, z)</span><br><span class="line">          <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">if</span> x != y</span><br><span class="line">          <span class="keyword">for</span> z <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">          <span class="keyword">if</span> y != z)</span><br></pre></td></tr></table></figure>
<h3 id="默认迭代器和操作符">默认迭代器和操作符</h3><blockquote>
<p>Tip<br>如果类型支持, 就使用默认迭代器和操作符. 比如列表, 字典及文件等.</p>
</blockquote>
<p><strong>定义:</strong><br>容器类型, 像字典和列表, 定义了默认的迭代器和关系测试操作符(in和not in)<br><strong>优点:</strong><br>默认操作符和迭代器简单高效, 它们直接表达了操作, 没有额外的方法调用. 使用默认操作符的函数是通用的. 它可以用于支持该操作的任何类型.<br><strong>缺点:</strong><br>你没法通过阅读方法名来区分对象的类型(例如, has_key()意味着字典). 不过这也是优点.<br><strong>结论:</strong><br>如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yes:  <span class="keyword">for</span> key <span class="keyword">in</span> adict: ...</span><br><span class="line">      <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> adict: ...</span><br><span class="line">      <span class="keyword">if</span> obj <span class="keyword">in</span> alist: ...</span><br><span class="line">      <span class="keyword">for</span> line <span class="keyword">in</span> afile: ...</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> dict.iteritems(): ...</span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No:   <span class="keyword">for</span> key <span class="keyword">in</span> adict.<span class="function"><span class="title">keys</span><span class="params">()</span></span>: ...</span><br><span class="line">      <span class="keyword">if</span> not adict.<span class="function"><span class="title">has_key</span><span class="params">(key)</span></span>: ...</span><br><span class="line">      <span class="keyword">for</span> line <span class="keyword">in</span> afile.<span class="function"><span class="title">readlines</span><span class="params">()</span></span>: ...</span><br></pre></td></tr></table></figure>
<h3 id="生成器">生成器</h3><blockquote>
<p>Tip<br>按需使用生成器.</p>
</blockquote>
<p><strong>定义:</strong><br>所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.<br><strong>优点:</strong><br>简化代码, 因为每次调用时, 局部变量和控制流的状态都会被保存. 比起一次创建一系列值的函数, 生成器使用的内存更少.<br><strong>缺点:</strong><br>没有.<br><strong>结论:</strong><br>鼓励使用. 注意在生成器函数的文档字符串中使用”Yields:”而不是”Returns:”.<br>(译者注: 参看 <a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/python_style_rules/#comments" target="_blank" rel="external">注释</a> )</p>
<h3 id="Lambda函数">Lambda函数</h3><blockquote>
<p>Tip<br>适用于单行函数</p>
</blockquote>
<p><strong>定义:</strong><br>与语句相反, lambda在一个表达式中定义匿名函数. 常用于为 <code>map()</code> 和 <code>filter()</code> 之类的高阶函数定义回调函数或者操作符.<br><strong>优点:</strong><br>方便.<br><strong>缺点:</strong><br>比本地函数更难阅读和调试. 没有函数名意味着堆栈跟踪更难理解. 由于lambda函数通常只包含一个表达式, 因此其表达能力有限.<br><strong>结论:</strong><br>适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.</p>
<p>对于常见的操作符，例如乘法操作符，使用 <code>operator</code> 模块中的函数以代替lambda函数. 例如, 推荐使用 <code>operator.mul</code> , 而不是 <code>lambda x, y: x * y</code> .</p>
<h3 id="条件表达式">条件表达式</h3><blockquote>
<p>Tip<br>适用于单行函数</p>
</blockquote>
<p><strong>定义:</strong><br>条件表达式是对于if语句的一种更为简短的句法规则. 例如: <code>x = 1 if cond else 2</code> .<br><strong>优点:</strong><br>比if语句更加简短和方便.<br><strong>缺点:</strong><br>比if语句难于阅读. 如果表达式很长， 难于定位条件.<br><strong>结论:</strong><br>适用于单行函数. 在其他情况下，推荐使用完整的if语句.</p>
<h3 id="默认参数值">默认参数值</h3><blockquote>
<p>Tip<br>适用于大部分情况.</p>
</blockquote>
<p><strong>定义:</strong><br>你可以在函数参数列表的最后指定变量的值, 例如, <code>def foo(a, b = 0):</code> . 如果调用foo时只带一个参数, 则b被设为0. 如果带两个参数, 则b的值等于第二个参数.<br><strong>优点:</strong><br>你经常会碰到一些使用大量默认值的函数, 但偶尔(比较少见)你想要覆盖这些默认值. 默认参数值提供了一种简单的方法来完成这件事, 你不需要为这些罕见的例外定义大量函数. 同时, Python也不支持重载方法和函数, 默认参数是一种”仿造”重载行为的简单方式.<br><strong>缺点:</strong><br>默认参数只在模块加载时求值一次. 如果参数是列表或字典之类的可变类型, 这可能会导致问题. 如果函数修改了对象(例如向列表追加项), 默认值就被修改了.<br><strong>结论:</strong><br>鼓励使用, 不过有如下注意事项:</p>
<p>不要在函数或方法定义中使用可变对象作为默认值.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=None)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> b <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">             b = []</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=[])</span>:</span></span><br><span class="line">         ...</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=time.time<span class="params">()</span>)</span>:</span>  <span class="comment"># The time the module was loaded???</span></span><br><span class="line">         ...</span><br><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=FLAGS.my_thing)</span>:</span>  <span class="comment"># sys.argv has not yet been parsed...</span></span><br><span class="line">         ...</span><br></pre></td></tr></table></figure>
<h3 id="属性_properties">属性 properties</h3><blockquote>
<p>Tip<br>访问和设置数据成员时, 你通常会使用简单, 轻量级的访问和设置函数. 建议用属性（properties）来代替它们.</p>
</blockquote>
<p><strong>定义:</strong><br>一种用于包装方法调用的方式. 当运算量不大, 它是获取和设置属性(attribute)的标准方式.<br><strong>优点:</strong><br>通过消除简单的属性(attribute)访问时显式的get和set方法调用, 可读性提高了. 允许懒惰的计算. 用Pythonic的方式来维护类的接口. 就性能而言, 当直接访问变量是合理的, 添加访问方法就显得琐碎而无意义. 使用属性(properties)可以绕过这个问题. 将来也可以在不破坏接口的情况下将访问方法加上.<br><strong>缺点:</strong><br>属性(properties)是在get和set方法声明后指定, 这需要使用者在接下来的代码中注意: set和get是用于属性(properties)的(除了用 <code>@property</code> 装饰器创建的只读属性). 必须继承自object类. 可能隐藏比如操作符重载之类的副作用. 继承时可能会让人困惑.<br><strong>结论:</strong><br>你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用 <code>@propert</code>y 装饰器 来创建.</p>
<p>如果子类没有覆盖属性, 那么属性的继承可能看上去不明显. 因此使用者必须确保访问方法间接被调用, 以保证子类中的重载方法被属性调用(使用模板方法设计模式).</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Square</span><span class="params">(object)</span>:</span></span><br><span class="line">         <span class="string">"""A square with two properties: a writable area and a read-only perimeter.</span><br><span class="line"></span><br><span class="line">         To use:</span><br><span class="line">         &gt;&gt;&gt; sq = Square(3)</span><br><span class="line">         &gt;&gt;&gt; sq.area</span><br><span class="line">         9</span><br><span class="line">         &gt;&gt;&gt; sq.perimeter</span><br><span class="line">         12</span><br><span class="line">         &gt;&gt;&gt; sq.area = 16</span><br><span class="line">         &gt;&gt;&gt; sq.side</span><br><span class="line">         4</span><br><span class="line">         &gt;&gt;&gt; sq.perimeter</span><br><span class="line">         16</span><br><span class="line">         """</span></span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, side)</span>:</span></span><br><span class="line">             self.side = side</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__get_area</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="string">"""Calculates the 'area' property."""</span></span><br><span class="line">             <span class="keyword">return</span> self.side ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">___get_area</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="string">"""Indirect accessor for 'area' property."""</span></span><br><span class="line">             <span class="keyword">return</span> self.__get_area()</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">__set_area</span><span class="params">(self, area)</span>:</span></span><br><span class="line">             <span class="string">"""Sets the 'area' property."""</span></span><br><span class="line">             self.side = math.sqrt(area)</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">___set_area</span><span class="params">(self, area)</span>:</span></span><br><span class="line">             <span class="string">"""Indirect setter for 'area' property."""</span></span><br><span class="line">             self._SetArea(area)</span><br><span class="line"></span><br><span class="line">         area = property(___get_area, ___set_area,</span><br><span class="line">                         doc=<span class="string">"""Gets or sets the area of the square."""</span>)</span><br><span class="line"></span><br><span class="line">         <span class="decorator">@property</span></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="keyword">return</span> self.side * <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>(译者注: 老实说, 我觉得这段示例代码很不恰当, 有必要这么蛋疼吗?)</p>
<h3 id="True_or_False的求值">True or False的求值</h3><blockquote>
<p>Tip<br>尽可能使用隐式false</p>
</blockquote>
<p><strong>定义:</strong><br>Python在布尔上下文中会将某些值求值为false. 按简单的直觉来讲, 就是所有的”空”值都被认为是false. 因此0， None, [], {}, “” 都被认为是false.<br><strong>优点:</strong><br>使用Python布尔值的条件语句更易读也更不易犯错. 大部分情况下, 也更快.<br><strong>缺点:</strong><br>对C/C++开发人员来说, 可能看起来有点怪.<br><strong>结论:</strong><br>尽可能使用隐式的false, 例如: 使用 <code>if foo:</code> 而不是 <code>if foo != []:</code> . 不过还是有一些注意事项需要你铭记在心:</p>
<ol>
<li><p>永远不要用==或者!=来比较单件, 比如None. 使用is或者is not.</p>
</li>
<li><p>注意: 当你写下 <code>if x:</code> 时, 你其实表示的是 <code>if x is not None</code> . 例如: 当你要测试一个默认值是None的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!</p>
</li>
<li><p>永远不要用==将一个布尔量与false相比较. 使用 <code>if not x:</code> 代替. 如果你需要区分false和None, 你应该用像 <code>if not x and x is not None:</code> 这样的语句.</p>
</li>
<li><p>对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此 <code>if not seq:</code> 或者 <code>if seq:</code> 比 <code>if len(seq):</code> 或 <code>if not len(seq):</code> 要更好.</p>
</li>
<li><p>处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> <span class="keyword">not</span> users:</span><br><span class="line">         <span class="keyword">print</span> <span class="string">'no users'</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> foo == <span class="number">0</span>:</span><br><span class="line">         self.handle_zero()</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">         self.handle_multiple_of_ten()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">No:  <span class="keyword">if</span> len(users) == <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">print</span> <span class="string">'no users'</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> foo <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> foo:</span><br><span class="line">         self.handle_zero()</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> i % <span class="number">10</span>:</span><br><span class="line">         self.handle_multiple_of_ten()</span><br></pre></td></tr></table></figure>
<ol>
<li>注意‘0’(字符串)会被当做true.</li>
</ol>
<h3 id="过时的语言特性">过时的语言特性</h3><blockquote>
<p>Tip<br>尽可能使用字符串方法取代字符串模块. 使用函数调用语法取代apply(). 使用列表推导, for循环取代filter(),map()以及reduce().</p>
</blockquote>
<p><strong>定义:</strong><br>当前版本的Python提供了大家通常更喜欢的替代品.<br><strong>结论:</strong><br>我们不使用不支持这些特性的Python版本, 所以没理由不用新的方式.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Yes: words = foo.split(<span class="string">':'</span>)</span><br><span class="line"></span><br><span class="line">     [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> my_list <span class="keyword">if</span> x[<span class="number">2</span>] == <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">     map(math.sqrt, data)    <span class="comment"># Ok. No inlined lambda expression.</span></span><br><span class="line"></span><br><span class="line">     fn(*args, **kwargs)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No:  words = string.split(foo, <span class="string">':'</span>)</span><br><span class="line"></span><br><span class="line">     map(<span class="keyword">lambda</span> x: x[<span class="number">1</span>], filter(<span class="keyword">lambda</span> x: x[<span class="number">2</span>] == <span class="number">5</span>, my_list))</span><br><span class="line"></span><br><span class="line">     apply(fn, args, kwargs)</span><br></pre></td></tr></table></figure>
<h3 id="词法作用域_Lexical_Scoping">词法作用域 Lexical Scoping</h3><blockquote>
<p>Tip<br>推荐使用</p>
</blockquote>
<p><strong>定义:</strong><br>嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.</p>
<p>一个使用这个特性的例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_adder</span><span class="params">(summand1)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a function that adds numbers to a given number."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span><span class="params">(summand2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> summand1 + summand2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure></p>
<p>(译者注: 这个例子有点诡异, 你应该这样使用这个函数: <code>sum = get_adder(summand1)(summand2)</code> )<br><strong>优点:</strong><br>通常可以带来更加清晰, 优雅的代码. 尤其会让有经验的Lisp和Scheme(还有Haskell, ML等)程序员感到欣慰.<br><strong>缺点:</strong><br>可能导致让人迷惑的bug. 例如下面这个依据 <a href="http://www.python.org/dev/peps/pep-0227/" target="_blank" rel="external">PEP-0227</a> 的例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> i,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="comment"># A bunch of code here</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:  <span class="comment"># Ah, i *is* local to Foo, so this is what Bar sees</span></span><br><span class="line">        <span class="keyword">print</span> i,</span><br><span class="line">    bar()</span><br></pre></td></tr></table></figure>
<p>因此 <code>foo([1, 2, 3])</code> 会打印 <code>1 2 3 3</code> , 不是 <code>1 2 3 4</code> .</p>
<p>(译者注: x是一个列表, for循环其实是将x中的值依次赋给i.这样对i的赋值就隐式的发生了, 整个foo函数体中的i都会被当做局部变量, 包括bar()中的那个. 这一点与C++之类的静态语言还是有很大差别的.)<br><strong>结论:</strong><br>鼓励使用.</p>
<h3 id="函数与方法装饰器">函数与方法装饰器</h3><blockquote>
<p>Tip<br>如果好处很显然, 就明智而谨慎的使用装饰器</p>
</blockquote>
<p><strong>定义:</strong><br><a href="http://www.python.org/doc/2.4.3/whatsnew/node6.html" target="_blank" rel="external">用于函数及方法的装饰器</a> (也就是@标记). 最常见的装饰器是@classmethod 和@staticmethod, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数 <code>my_decorator</code> , 下面的两段代码是等效的:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="decorator">@my_decorator</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="comment"># method body ...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># method body ...</span></span><br><span class="line">    method = my_decorator(method)</span><br></pre></td></tr></table></figure>
<p><strong>优点:</strong><br>优雅的在函数上指定一些转换. 该转换可能减少一些重复代码, 保持已有函数不变(enforce invariants), 等.<br><strong>缺点:</strong><br>装饰器可以在函数的参数或返回值上执行任何操作, 这可能导致让人惊异的隐藏行为. 而且, 装饰器在导入时执行. 从装饰器代码的失败中恢复更加不可能.<br><strong>结论:</strong><br>如果好处很显然, 就明智而谨慎的使用装饰器. 装饰器应该遵守和函数一样的导入和命名规则. 装饰器的python文档应该清晰的说明该函数是一个装饰器. 请为装饰器编写单元测试.</p>
<p>避免装饰器自身对外界的依赖(即不要依赖于文件, socket, 数据库连接等), 因为装饰器运行时这些资源可能不可用(由 pydoc 或其它工具导入). 应该保证一个用有效参数调用的装饰器在所有情况下都是成功的.</p>
<p>装饰器是一种特殊形式的”顶级代码”. 参考后面关于 Main 的话题.</p>
<h3 id="线程">线程</h3><blockquote>
<p>Tip<br>不要依赖内建类型的原子性.</p>
</blockquote>
<p>虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果<code>__hash__</code>或<code>__eq__</code>被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).</p>
<p>优先使用Queue模块的 <code>Queue</code> 数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用 <code>threading.Condition</code> 来取代低级别的锁了.</p>
<h3 id="威力过大的特性">威力过大的特性</h3><blockquote>
<p>Tip<br>避免使用这些特性</p>
</blockquote>
<p><strong>定义:</strong><br>Python是一种异常灵活的语言, 它为你提供了很多花哨的特性, 诸如元类(metaclasses), 字节码访问, 任意编译(on-the-fly compilation), 动态继承, 对象父类重定义(object reparenting), 导入黑客(import hacks), 反射, 系统内修改(modification of system internals), 等等.<br><strong>优点:</strong><br>强大的语言特性, 能让你的代码更紧凑.<br><strong>缺点:</strong><br>使用这些很”酷”的特性十分诱人, 但不是绝对必要. 使用奇技淫巧的代码将更加难以阅读和调试. 开始可能还好(对原作者而言), 但当你回顾代码, 它们可能会比那些稍长一点但是很直接的代码更加难以理解.<br><strong>结论:</strong><br>在你的代码中避免这些特性.</p>
<h2 id="Python风格规范">Python风格规范</h2><h3 id="分号">分号</h3><blockquote>
<p>Tip<br>不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p>
</blockquote>
<h3 id="行长度">行长度</h3><blockquote>
<p>Tip<br>每行不超过80个字符</p>
</blockquote>
<p>例外:</p>
<ol>
<li>长的导入模块语句</li>
<li>注释里的URL</li>
</ol>
<p>不要使用反斜杠连接行.</p>
<p>Python会将 <a href="http://docs.python.org/2/reference/lexical_analysis.html#implicit-line-joining" target="_blank" rel="external">圆括号, 中括号和花括号中的行隐式的连接起来</a> , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yes: foo_bar(self, width, height, color=<span class="string">'black'</span>, design=<span class="keyword">None</span>, x=<span class="string">'foo'</span>,</span><br><span class="line">             emphasis=<span class="keyword">None</span>, highlight=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (width == <span class="number">0</span> <span class="keyword">and</span> height == <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">         color == <span class="string">'red'</span> <span class="keyword">and</span> emphasis == <span class="string">'strong'</span>):</span><br></pre></td></tr></table></figure>
<p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x =<span class="function"> (</span>'This will build a very<span class="instruction"> long </span>long '</span><br><span class="line">     'long<span class="instruction"> long </span>long<span class="instruction"> long </span>long<span class="instruction"> long </span>string'<span class="function">)</span></span><br></pre></td></tr></table></figure></p>
<p>在注释中，如果必要，将长的URL放在一行上。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">Yes:</span>  <span class="preprocessor"># See details at</span></span><br><span class="line">      <span class="preprocessor"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">No:</span>  <span class="preprocessor"># See details at</span></span><br><span class="line">     <span class="preprocessor"># http://www.example.com/us/developer/documentation/api/content/\</span></span><br><span class="line">     <span class="preprocessor"># v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure>
<p>注意上面例子中的元素缩进; 你可以在本文的 <code>缩进</code> 部分找到解释.</p>
<h3 id="括号">括号</h3><blockquote>
<p>Tip<br>宁缺毋滥的使用括号</p>
</blockquote>
<p>除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> foo:</span><br><span class="line">         <span class="function"><span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">     while x:</span><br><span class="line">         x = <span class="function"><span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">     <span class="keyword">if</span> x and y:</span><br><span class="line">         <span class="function"><span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">     <span class="keyword">if</span> not x:</span><br><span class="line">         <span class="function"><span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">     return foo</span><br><span class="line">     <span class="keyword">for</span> (x, y) <span class="keyword">in</span> dict.<span class="function"><span class="title">items</span><span class="params">()</span></span>: ...</span><br></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No:  <span class="keyword">if</span> (x):</span><br><span class="line">         <span class="function"><span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">     <span class="keyword">if</span> <span class="function"><span class="title">not</span><span class="params">(x)</span></span>:</span><br><span class="line">         <span class="function"><span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">     return (foo)</span><br></pre></td></tr></table></figure>
<h3 id="缩进">缩进</h3><blockquote>
<p>Tip<br>用4个空格来缩进代码</p>
</blockquote>
<p>绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素(见 <code>行长度</code> 部分的示例), 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Yes:   <span class="comment"># Aligned with opening delimiter</span></span><br><span class="line">       <span class="variable">foo =</span> long_function_name(var_one, var_two,</span><br><span class="line">                                var_three, var_four)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Aligned with opening delimiter in a dictionary</span></span><br><span class="line">       <span class="variable">foo =</span> &#123;</span><br><span class="line">           long_dictionary_key: value1 +</span><br><span class="line">                                value2,</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 4-space hanging indent; nothing on first line</span></span><br><span class="line">       <span class="variable">foo =</span> long_function_name(</span><br><span class="line">           var_one, var_two, var_three,</span><br><span class="line">           var_four)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 4-space hanging indent in a dictionary</span></span><br><span class="line">       <span class="variable">foo =</span> &#123;</span><br><span class="line">           long_dictionary_key:</span><br><span class="line">               long_dictionary_value,</span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">No:    <span class="comment"># Stuff on first line forbidden</span></span><br><span class="line">      <span class="variable">foo =</span> long_function_name(var_one, var_two,</span><br><span class="line">          var_three, var_four)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 2-space hanging indent forbidden</span></span><br><span class="line">      <span class="variable">foo =</span> long_function_name(</span><br><span class="line">        var_one, var_two, var_three,</span><br><span class="line">        var_four)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># No hanging indent in a dictionary</span></span><br><span class="line">      <span class="variable">foo =</span> &#123;</span><br><span class="line">          long_dictionary_key:</span><br><span class="line">              long_dictionary_value,</span><br><span class="line">              ...</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h3 id="空行">空行</h3><blockquote>
<p>Tip<br>顶级定义之间空两行, 方法定义之间空一行</p>
</blockquote>
<p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.</p>
<h3 id="空格">空格</h3><blockquote>
<p>Tip<br>按照标准的排版规范来使用标点两边的空格</p>
</blockquote>
<p>括号内不要有空格.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">Yes</span>: <span class="tag">spam</span>(ham[<span class="number">1</span>], &#123;<span class="attribute">eggs</span>: <span class="number">2</span>&#125;, [])</span><br></pre></td></tr></table></figure></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">No</span>:  <span class="tag">spam</span>( ham[ <span class="number">1</span> ], &#123; <span class="attribute">eggs</span>: <span class="number">2</span> &#125;, [ ] )</span><br></pre></td></tr></table></figure>
<p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="keyword">if</span> <span class="variable">x =</span>= <span class="number">4</span>:</span><br><span class="line">         print x, y</span><br><span class="line">     x, <span class="variable">y =</span> y, x</span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">No</span>:  <span class="keyword">if</span> x == 4 :</span><br><span class="line">         <span class="keyword">print</span> x , <span class="literal">y</span></span><br><span class="line">     x , y = y , x</span><br></pre></td></tr></table></figure>
<p>参数列表, 索引或切片的左括号前不应加空格.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="function"><span class="title">spam</span><span class="params">(<span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">no</span>: <span class="string">spam (1)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ye<span class="variable">s:</span> dict[<span class="string">'key'</span>] = <span class="keyword">list</span>[<span class="built_in">index</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">No</span>:  <span class="atom">dict</span> [<span class="string">'key'</span>] = <span class="atom">list</span> [<span class="atom">index</span>]</span><br></pre></td></tr></table></figure>
<p>在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Yes</span>: <span class="string">x == 1</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">No</span>: <span class="string"> x&lt;1</span></span><br></pre></td></tr></table></figure>
<p>当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r=real, i=imag)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No:  <span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag = <span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>
<p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line">     <span class="variable">foo =</span> <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">     <span class="variable">long_name =</span> <span class="number">2</span>  <span class="comment"># comment that should not be aligned</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">dictionary =</span> &#123;</span><br><span class="line">         <span class="string">"foo"</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">No:</span><br><span class="line">     <span class="variable">foo       =</span> <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">     <span class="variable">long_name =</span> <span class="number">2</span>     <span class="comment"># comment that should not be aligned</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">dictionary =</span> &#123;</span><br><span class="line">         <span class="string">"foo"</span>      : <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Python_解析器">Python 解析器</h3><blockquote>
<p>Tip<br>大部分.py文件不必以#!作为文件的开始. 根据 <a href="http://www.python.org/dev/peps/pep-0394/" target="_blank" rel="external">PEP-394</a> , 程序的main文件应该以#!/usr/bin/python2或者 #!/usr/bin/python3开始.</p>
</blockquote>
<p>(译者注: 在计算机科学中, <a href="http://en.wikipedia.org/wiki/Shebang_%28Unix%29" target="_blank" rel="external">Shebang</a> (也称为Hashbang)是一个由井号和叹号构成的字符串行(#!), 其出现在文本文件的第一行的前两个字符. 在文件中存在Shebang的情况下, 类Unix操作系统的程序载入器会分析Shebang后的内容, 将这些内容作为解释器指令, 并调用该指令, 并将载有Shebang的文件路径作为该解释器的参数. 例如, 以指令#!/bin/sh开头的文件在执行时会实际调用/bin/sh程序.)<br>#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入#!.</p>
<h3 id="注释">注释</h3><blockquote>
<p>Tip<br>确保对模块, 函数, 方法和行内注释使用正确的风格 文档字符串</p>
</blockquote>
<p>Python有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的<strong>doc</strong>成员被自动提取, 并且被pydoc所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号”“”( <a href="http://www.python.org/dev/peps/pep-0257/" target="_blank" rel="external">PEP-257</a> ). 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.<br><strong>模块</strong></p>
<p>每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.<br><strong>函数和方法</strong></p>
<p>下文所指的函数,包括函数, 方法, 以及生成器.</p>
<p>一个函数必须要有文档字符串, 除非它满足以下条件:</p>
<ol>
<li>外部不可见</li>
<li>非常短小</li>
<li>简单明了</li>
</ol>
<p>文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述”怎么做”, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.</p>
<p>关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. 每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.</p>
<p><code>Args:</code><br>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受<em>foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出</em>foo和**bar.</p>
<p><code>Returns:</code> (或者 Yields: 用于生成器)<br>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</p>
<p><code>Raises:</code><br>列出与接口有关的所有异常.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></span><br><span class="line">    <span class="string">"""Fetches rows from a Bigtable.</span><br><span class="line"></span><br><span class="line">    Retrieves rows pertaining to the given keys from the Table instance</span><br><span class="line">    represented by big_table.  Silly things may happen if</span><br><span class="line">    other_silly_variable is not None.</span><br><span class="line"></span><br><span class="line">    Args:</span><br><span class="line">        big_table: An open Bigtable Table instance.</span><br><span class="line">        keys: A sequence of strings representing the key of each table row</span><br><span class="line">            to fetch.</span><br><span class="line">        other_silly_variable: Another optional variable, that has a much</span><br><span class="line">            longer name than the other args, and which does nothing.</span><br><span class="line"></span><br><span class="line">    Returns:</span><br><span class="line">        A dict mapping keys to the corresponding table row data</span><br><span class="line">        fetched. Each row is represented as a tuple of strings. For</span><br><span class="line">        example:</span><br><span class="line"></span><br><span class="line">        &#123;'Serak': ('Rigel VII', 'Preparer'),</span><br><span class="line">         'Zim': ('Irk', 'Invader'),</span><br><span class="line">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</span><br><span class="line"></span><br><span class="line">        If a key from the keys argument is missing from the dictionary,</span><br><span class="line">        then that row was not found in the table.</span><br><span class="line"></span><br><span class="line">    Raises:</span><br><span class="line">        IOError: An error occurred accessing the bigtable.Table object.</span><br><span class="line">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p><strong>类</strong></p>
<p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Summary of class here.</span><br><span class="line"></span><br><span class="line">    Longer class information....</span><br><span class="line">    Longer class information....</span><br><span class="line"></span><br><span class="line">    Attributes:</span><br><span class="line">        likes_spam: A boolean indicating if we like SPAM or not.</span><br><span class="line">        eggs: An integer count of the eggs we have laid.</span><br><span class="line">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, likes_spam=False)</span>:</span></span><br><span class="line">        <span class="string">"""Inits SampleClass with blah."""</span></span><br><span class="line">        self.likes_spam = likes_spam</span><br><span class="line">        self.eggs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Performs operation blah."""</span></span><br></pre></td></tr></table></figure></p>
<p><strong>块注释和行注释</strong></p>
<p>最需要写注释的是代码中那些技巧性的部分. 如果你在下次 <a href="http://en.wikipedia.org/wiki/Code_review" target="_blank" rel="external">代码审查</a> 的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># We <span class="operator"><span class="keyword">use</span> a weighted dictionary search <span class="keyword">to</span> find out <span class="keyword">where</span> i <span class="keyword">is</span> <span class="keyword">in</span></span><br><span class="line"># the <span class="built_in">array</span>.  We extrapolate <span class="keyword">position</span> based <span class="keyword">on</span> the largest num</span><br><span class="line"># <span class="keyword">in</span> the <span class="built_in">array</span> <span class="keyword">and</span> the <span class="built_in">array</span> <span class="keyword">size</span> <span class="keyword">and</span> <span class="keyword">then</span> <span class="keyword">do</span> <span class="built_in">binary</span> search <span class="keyword">to</span></span><br><span class="line"># <span class="keyword">get</span> the exact <span class="built_in">number</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &amp; (i-<span class="number">1</span>) == <span class="number">0</span>:        # <span class="literal">true</span> iff i <span class="keyword">is</span> a <span class="keyword">power</span> <span class="keyword">of</span> <span class="number">2</span></span></span><br></pre></td></tr></table></figure>
<p>为了提高可读性, 注释应该至少离开代码2个空格.</p>
<p>另一方面, <strong>绝不要描述代码</strong>. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BAD COMMENT: Now go through the b array and make sure whenever i occurs</span></span><br><span class="line"><span class="comment"># the next element is i+1</span></span><br></pre></td></tr></table></figure>
<h3 id="类">类</h3><blockquote>
<p>Tip<br>如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">         <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span><span class="params">(object)</span>:</span></span><br><span class="line">             <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span><span class="params">(ParentClass)</span>:</span></span><br><span class="line">         <span class="string">"""Explicitly inherits from another class already."""</span></span><br></pre></td></tr></table></figure>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">No</span>: <span class="keyword"><span class="keyword">class</span> <span class="title">SampleClass</span>:</span></span><br><span class="line">        <span class="literal">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword"><span class="keyword">class</span> <span class="title">OuterClass</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword"><span class="keyword">class</span> <span class="title">InnerClass</span>:</span></span><br><span class="line">            <span class="literal">pass</span></span><br></pre></td></tr></table></figure>
<p>继承自 <code>object</code> 是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受Python 3000的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括 <code>__new__, __init__, __delattr__, __getattribute__, __setattr__, __hash__, __repr__, and __str__</code> .</p>
<h3 id="字符串">字符串</h3><blockquote>
<p>Tip<br>即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yes: x = a + b</span><br><span class="line">     x = <span class="string">'%s, %s!'</span> % (imperative, expletive)</span><br><span class="line">     x = <span class="string">'&#123;&#125;, &#123;&#125;!'</span>.format(imperative, expletive)</span><br><span class="line">     x = <span class="string">'name: %s; score: %d'</span> % (name, n)</span><br><span class="line">     x = <span class="string">'name: &#123;&#125;; score: &#123;&#125;'</span>.format(name, n)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">No: x = <span class="string">'%s%s'</span> % (a, b)  <span class="comment"># use + in this case</span></span><br><span class="line">    x = <span class="string">'&#123;&#125;&#123;&#125;'</span>.format(a, b)  <span class="comment"># use + in this case</span></span><br><span class="line">    x = imperative + <span class="string">', '</span> + expletive + <span class="string">'!'</span></span><br><span class="line">    x = <span class="string">'name: '</span> + name + <span class="string">'; score: '</span> + str(n)</span><br></pre></td></tr></table></figure>
<p>避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 <code>.join</code> 连接列表. (也可以将每个子串写入一个 <code>cStringIO.StringIO</code> 缓存中.)<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yes: items = [<span class="string">'&lt;table&gt;'</span>]</span><br><span class="line">     <span class="keyword">for</span> last_name, first_name <span class="keyword">in</span> employee_list:</span><br><span class="line">         items.<span class="function"><span class="title">append</span><span class="params">(<span class="string">'&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;'</span> % (last_name, first_name)</span></span>)</span><br><span class="line">     items.<span class="function"><span class="title">append</span><span class="params">(<span class="string">'&lt;/table&gt;'</span>)</span></span></span><br><span class="line">     employee_table = <span class="string">''</span>.<span class="function"><span class="title">join</span><span class="params">(items)</span></span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">No: employee_table = <span class="comment">'<span class="xmlDocTag">&lt;table&gt;</span>'</span></span><br><span class="line">    <span class="keyword">for</span> last_name, first_name <span class="keyword">in</span> employee_list:</span><br><span class="line">        employee_table += <span class="comment">'<span class="xmlDocTag">&lt;tr&gt;</span><span class="xmlDocTag">&lt;td&gt;</span>%s, %s<span class="xmlDocTag">&lt;/td&gt;</span><span class="xmlDocTag">&lt;/tr&gt;</span>' % (last_name, first_name)</span></span><br><span class="line">    employee_table += <span class="comment">'<span class="xmlDocTag">&lt;/table&gt;</span>'</span></span><br></pre></td></tr></table></figure>
<p>在同一个文件中, 保持使用字符串引号的一致性. 使用单引号’或者双引号”之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用. GPyLint已经加入了这一检查.</p>
<p>(译者注:GPyLint疑为笔误, 应为PyLint.)</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line">     <span class="function"><span class="title">Python</span><span class="params">(<span class="string">'Why are you hiding your eyes?'</span>)</span></span></span><br><span class="line">     <span class="function"><span class="title">Gollum</span><span class="params">(<span class="string">"I'm scared of lint errors."</span>)</span></span></span><br><span class="line">     <span class="function"><span class="title">Narrator</span><span class="params">(<span class="string">'"Good!" thought a happy Python reviewer.'</span>)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">No:</span><br><span class="line">     <span class="function"><span class="title">Python</span><span class="params">(<span class="string">"Why are you hiding your eyes?"</span>)</span></span></span><br><span class="line">     <span class="function"><span class="title">Gollum</span><span class="params">(<span class="string">'The lint. It burns. It burns us.'</span>)</span></span></span><br><span class="line">     <span class="function"><span class="title">Gollum</span><span class="params">(<span class="string">"Always the great lint. Watching. Watching."</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>为多行字符串使用三重双引号”“”而非三重单引号’‘’. 当且仅当项目中使用单引号’来引用字符串时, 才可能会使用三重’‘’为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号”“”. 不过要注意, 通常用隐式行连接更清晰, 因为多行字符串与程序其他部分的缩进方式不一致.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ye<span class="variable">s:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"This is much nicer.\n"</span></span><br><span class="line">           <span class="string">"Do it this way.\n"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">No:</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"""This is pretty ugly.</span><br><span class="line">  Don't do this.</span><br><span class="line">  """</span></span><br></pre></td></tr></table></figure>
<h3 id="文件和sockets">文件和sockets</h3><blockquote>
<p>Tip<br>在文件和sockets结束时, 显式的关闭它.</p>
</blockquote>
<p>除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:</p>
<ol>
<li>它们可能会消耗有限的系统资源,如文件描述符.如果这些资源在使用后没有及时归还系统,那么用于处理这些对象的代码会将资源消耗殆尽.</li>
<li>持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.</li>
<li>仅仅是从逻辑上关闭文件和sockets,那么它们仍然可能会被其共享的程序在无意中进行读或者写操作.只有当它们真正被关闭后,对于它们尝试进行读或者写操作将会跑出异常,并使得问题快速显现出来.</li>
</ol>
<p>而且,幻想当文件对象析构时,文件和sockets会自动关闭,试图将文件对象的生命周期和文件的状态绑定在一起的想法,都是不现实的. 因为有如下原因:</p>
<ol>
<li>没有任何方法可以确保运行环境会真正的执行文件的析构.不同的Python实现采用不同的内存管理技术,比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.</li>
<li>对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).</li>
</ol>
<p>推荐使用<a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement" target="_blank" rel="external">“with”语句</a> 以管理文件:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">with</span> <span class="built_in">open</span>(<span class="string">"hello.txt"</span>) <span class="keyword">as</span> hello_file:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="operator">in</span> hello_file:</span><br><span class="line">        print <span class="built_in">line</span></span><br></pre></td></tr></table></figure></p>
<p>对于不支持使用”with”语句的类似文件的对象,使用 <code>contextlib.closing()</code>:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> contextlib.closing(urllib.urlopen(<span class="string">"http://www.python.org/"</span>)) <span class="literal">as</span> front_page:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> front_page:</span><br><span class="line">        <span class="built_in">print</span> line</span><br></pre></td></tr></table></figure></p>
<p>Legacy AppEngine 中Python 2.5的代码如使用”with”语句, 需要添加 <code>“from __future__ import with_statement”</code>.</p>
<h3 id="TODO注释">TODO注释</h3><blockquote>
<p>Tip<br>为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.</p>
</blockquote>
<p>TODO注释应该在所有开头处包含”TODO”字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># TODO(kl@gmail.com): <span class="operator"><span class="keyword">Use</span> a <span class="string">"*"</span> here <span class="keyword">for</span> <span class="keyword">string</span> repetition.</span><br><span class="line"># TODO(Zeke) <span class="keyword">Change</span> this <span class="keyword">to</span> <span class="keyword">use</span> relations.</span></span><br></pre></td></tr></table></figure></p>
<p>如果你的TODO是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).</p>
<h3 id="导入格式">导入格式</h3><blockquote>
<p>Tip<br>每个导入应该独占一行<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: <span class="preprocessor"><span class="keyword">import</span> os</span></span><br><span class="line">     <span class="preprocessor"><span class="keyword">import</span> sys</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">No:</span>  <span class="keyword">import</span> os, sys</span><br></pre></td></tr></table></figure>
<p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p>
<ol>
<li>标准库导入</li>
<li>第三方库导入</li>
<li>应用程序指定导入</li>
</ol>
<p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">import</span> foo</span></span><br><span class="line">from foo <span class="preprocessor"><span class="keyword">import</span> bar</span></span><br><span class="line">from foo.bar <span class="preprocessor"><span class="keyword">import</span> baz</span></span><br><span class="line">from foo.bar <span class="preprocessor"><span class="keyword">import</span> Quux</span></span><br><span class="line">from Foob <span class="preprocessor"><span class="keyword">import</span> ar</span></span><br></pre></td></tr></table></figure></p>
<h3 id="语句">语句</h3><blockquote>
<p>Tip<br>通常每个语句应该独占一行</p>
</blockquote>
<p>不过, 如果测试结果与测试语句在一行放得下, 你也可以将它们放在同一行. 如果是if语句, 只有在没有else时才能这样做. 特别地, 绝不要对 <code>try/except</code> 这样做, 因为try和except不能放在同一行.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: <span class="function"><span class="title">bar</span><span class="params">(foo)</span></span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">No:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: <span class="function"><span class="title">bar</span><span class="params">(foo)</span></span></span><br><span class="line">  <span class="keyword">else</span>:   <span class="function"><span class="title">baz</span><span class="params">(foo)</span></span></span><br><span class="line"></span><br><span class="line">  try:               <span class="function"><span class="title">bar</span><span class="params">(foo)</span></span></span><br><span class="line">  except ValueError: <span class="function"><span class="title">baz</span><span class="params">(foo)</span></span></span><br><span class="line">  </span><br><span class="line">  try:</span><br><span class="line">      <span class="function"><span class="title">bar</span><span class="params">(foo)</span></span></span><br><span class="line">  except ValueError: <span class="function"><span class="title">baz</span><span class="params">(foo)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="访问控制">访问控制</h3><blockquote>
<p>Tip<br>在Python中, 对于琐碎又不太重要的访问函数,你应该直接使用公有变量来取代它们,这样可以避免额外的函数调用开销.当添加更多功能时, 你可以用属性(property)来保持语法的一致性.</p>
<p>(译者注: 重视封装的面向对象程序员看到这个可能会很反感, 因为他们一直被教育: 所有成员变量都必须是私有的! 其实, 那真的是有点麻烦啊.试着去接受Pythonic哲学吧)</p>
</blockquote>
<p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 <code>get_foo()</code> 和 <code>set_foo()</code> 这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.</p>
<h3 id="命名">命名</h3><blockquote>
<p>Tip<br>module_name, package_name, ClassName, method_name, ExceptionName,function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</p>
</blockquote>
<p><strong>应该避免的名称</strong></p>
<ol>
<li>单字符名称, 除了计数器和迭代器.</li>
<li>包/模块名中的连字符(-)</li>
<li>双下划线开头并结尾的名称(Python保留, 例如<strong>init</strong>)</li>
</ol>
<p><strong>命名约定</strong></p>
<ol>
<li>所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.</li>
<li>用单下划线(_)开头表示模块变量或函数是protected的(使用import * from时不会包含).</li>
<li>用双下划线(__)开头的实例变量或方法表示类内私有.</li>
<li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li>
<li>对类名使用大写字母开头的单词(如CapWords,即Pascal风格),但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名,但现在已经不鼓励这样做,因为如果模块名碰巧和类一致, 这会让人困扰.</li>
</ol>
<p><strong>Python之父Guido推荐的规范</strong></p>
<table>
<thead>
<tr>
<th>Type</th>
<th style="text-align:left">Public</th>
<th style="text-align:left">Internal</th>
</tr>
</thead>
<tbody>
<tr>
<td>Modules</td>
<td style="text-align:left">lower_with_under</td>
<td style="text-align:left">_lower_with_under</td>
</tr>
<tr>
<td>Packages</td>
<td style="text-align:left">lower_with_under</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>Classes</td>
<td style="text-align:left">CapWords</td>
<td style="text-align:left">_CapWords</td>
</tr>
<tr>
<td>Exceptions</td>
<td style="text-align:left">CapWords</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>Functions</td>
<td style="text-align:left">lower_with_under()</td>
<td style="text-align:left">lower_with_under()</td>
</tr>
<tr>
<td>Global/Class Constants</td>
<td style="text-align:left">CAPS_WITH_UNDER</td>
<td style="text-align:left">CAPS_WITH_UNDER</td>
</tr>
<tr>
<td>Global/Class Variables</td>
<td style="text-align:left">lower_with_under</td>
<td style="text-align:left">lower_with_under</td>
</tr>
<tr>
<td>Instance Variables</td>
<td style="text-align:left">lower_with_under</td>
<td style="text-align:left">_lower_with_under (protected) or __lower_with_under (private)</td>
</tr>
<tr>
<td>Method Names</td>
<td style="text-align:left">lower_with_under()</td>
<td style="text-align:left">_lower_with_under() (protected) or __lower_with_under() (private)</td>
</tr>
<tr>
<td>Function/Method Parameters</td>
<td style="text-align:left">lower_with_under</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>Local Variables</td>
<td style="text-align:left">lower_with_under</td>
</tr>
</tbody>
</table>
<h3 id="Main">Main</h3><blockquote>
<p>Tip<br>即使是一个打算被用作脚本的文件,也应该是可导入的.并且简单的导入不应该导致这个脚本的主功能(mainfunctionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.</p>
</blockquote>
<p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查 <code>if __name__ == &#39;__main__&#39;</code> , 这样当模块被导入时主程序就不会被执行.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">      ...</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象或者执行那些不应该在使用pydoc时执行的操作.</p>
<h2 id="临别赠言">临别赠言</h2><p><strong>请务必保持代码的一致性</strong></p>
<p>如果你正在编辑代码, 花几分钟看一下周边代码,然后决定风格.如果它们在所有的算术操作符两边都使用空格,那么你也应该这样做. 如果它们的注释都用标记包围起来, 那么你的注释也要这样.</p>
<p>制定风格指南的目的在于让代码有规可循,这样人们就可以专注于”你在说什么”,而不是”你在怎么说”.我们在这里给出的是全局的规范, 但是本地的规范同样重要.如果你加到一个文件里的代码和原有代码大相径庭,它会让读者不知所措.避免这种情况.</p>
<h2 id="参考：">参考：</h2><ul>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/" target="_blank" rel="external">Google Python 风格指南 - 中文版</a></li>
<li><a href="https://github.com/zh-google-styleguide/zh-google-styleguide" target="_blank" rel="external">zh-google-styleguide</a></li>
<li><a href="http://www.yeolar.com/note/2013/01/10/python-style-guide/" target="_blank" rel="external">Google Python风格指南</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li><p>Python是一种对代码风格很重视的语言，从缩进就能看出这一点，Python强调易于理解。最近在负责代码重构的工作，为了统一大家的代码风格，制订规范，学习了一下网上这份Google的Python风格指南。</p>
</li>
<l]]>
    </summary>
    
      <category term="Python" scheme="http://wiki.printf.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo搭建Wiki]]></title>
    <link href="http://wiki.printf.me/2015/04/30/Hexo%E6%90%AD%E5%BB%BAWiki/"/>
    <id>http://wiki.printf.me/2015/04/30/Hexo搭建Wiki/</id>
    <published>2015-04-30T04:09:41.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<ul>
<li>2015-4-30 第一次编写</li>
</ul>
<hr>
<p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/Hexo.png" alt="此处输入图片的描述"></p>
<h2 id="0x01准备：">0x01准备：</h2><ol>
<li><a href="http://twitter.com/tommy351" target="_blank" rel="external">tommy351</a>编写的静态博客框架<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>（目前版本是3.0.x）</li>
<li><a href="https://github.com/wzpan/hexo-theme-wixo/" target="_blank" rel="external">Wixo</a>的主题</li>
<li>GitHub的repos的gh-pages 分支放置wiki，托管于GitHub的Pages服务上</li>
<li>源码放置在Github同一个repos下的source分支下进行版本管理</li>
<li><a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a>自动化测试框架自动编译网站</li>
</ol>
<a id="more"></a>
<h2 id="0x02过程：">0x02过程：</h2><h3 id="安装NodeJs">安装NodeJs</h3><p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/NodeJs.png" alt="此处输入图片的描述"><br>因为Hexo是使用Nodejs编写的，所以需要部署NodeJs的环境</p>
<ul>
<li><a href="https://nodejs.org/" target="_blank" rel="external">下载nodejs</a></li>
</ul>
<p>Windows 可以直接下载到安装包安装即可，其它系统稍后补充</p>
<h3 id="安装Hexo(3-x以上)">安装Hexo(3.x以上)</h3><h4 id="安装hexo-cli">安装hexo-cli</h4><pre><code>$ npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span>
</code></pre><p>3.x以上版本相比2.x以下版本使用上有差别，3.x版本模块化程度较高，你可以不用经常更新hexo-cli，但是多个hexo版本可以共存</p>
<h4 id="初始化目录">初始化目录</h4><pre><code><span class="variable">$ </span>hexo init <span class="constant">Wiki</span>
</code></pre><blockquote>
<p>PS I:> hexo init Wiki<br>    INFO  Copying data to I:\Wiki<br>    INFO  You are almost done! Don’t forget to run ‘npm install’ before you start blogging with Hexo!</p>
</blockquote>
<p>这样就会建立一个Wiki的文件夹，在文件夹里已经做了一些初始化的工作:</p>
<ul>
<li>目录结构：<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-</span><span class="literal">-</span> <span class="comment">wiki</span></span><br><span class="line">    <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">scaffolds</span>           <span class="comment">#工具模板</span></span><br><span class="line">    <span class="comment">|</span>       <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">draft</span><span class="string">.</span><span class="comment">md</span></span><br><span class="line">    <span class="comment">|</span>       <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">page</span><span class="string">.</span><span class="comment">md</span></span><br><span class="line">    <span class="comment">|</span>       <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">post</span><span class="string">.</span><span class="comment">md</span></span><br><span class="line">    <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">source</span></span><br><span class="line">    <span class="comment">|</span>   <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">_posts</span>          <span class="comment">#文章文件夹</span></span><br><span class="line">    <span class="comment">|</span>         <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">hello</span><span class="literal">-</span><span class="comment">world</span><span class="string">.</span><span class="comment">md</span></span><br><span class="line">    <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">themes</span>              <span class="comment">#主题文件夹</span></span><br><span class="line">    <span class="comment">|</span>     <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">landscape</span>     <span class="comment">#</span> <span class="comment">默认主题文件夹</span></span><br><span class="line">    <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="string">.</span><span class="comment">gitignore</span></span><br><span class="line">    <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">_config</span><span class="string">.</span><span class="comment">yml</span>         <span class="comment">#全局配置文件</span></span><br><span class="line">    <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">package</span><span class="string">.</span><span class="comment">json</span>        <span class="comment">#插件的配置，使用npm</span> <span class="comment">install</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</span> <span class="comment">会写入这里</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>另外还有<code>source/_drafts</code>存放的是草稿</p>
<h4 id="安装_Hexo">安装 Hexo</h4><p>切到Wiki目录下，然后安装指定版本的Hexo &gt; 3.0</p>
<pre><code>$ npm <span class="operator"><span class="keyword">install</span> hexo <span class="comment">--save</span></span>
</code></pre><p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/hexo_install.png" alt="此处输入图片的描述"><br>然后，安装相关默认的npm插件</p>
<pre><code>$ npm <span class="keyword">install</span> 
</code></pre><p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/npm_install.png" alt="此处输入图片的描述"></p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">hexo-<span class="keyword">renderer</span>-ejs<span class="variable">@0</span>.1.0 node_modules\hexo-<span class="keyword">renderer</span>-ejs</span><br><span class="line">├── ejs<span class="variable">@1</span>.0.0</span><br><span class="line">└── lodash<span class="variable">@2</span>.4.2</span><br><span class="line"></span><br><span class="line">hexo-generator-index<span class="variable">@0</span>.1.1 node_modules\hexo-generator-index</span><br><span class="line">├── object-assign<span class="variable">@2</span>.0.0</span><br><span class="line">└── hexo-pagination<span class="variable">@0</span>.0.2 (utils-merge<span class="variable">@1</span>.0.0)</span><br><span class="line"></span><br><span class="line">hexo-generator-tag<span class="variable">@0</span>.1.1 node_modules\hexo-generator-tag</span><br><span class="line">├── object-assign<span class="variable">@2</span>.0.0</span><br><span class="line">└── hexo-pagination<span class="variable">@0</span>.0.2 (utils-merge<span class="variable">@1</span>.0.0)</span><br><span class="line"></span><br><span class="line">hexo-generator-category<span class="variable">@0</span>.1.2 node_modules\hexo-generator-category</span><br><span class="line">├── object-assign<span class="variable">@2</span>.0.0</span><br><span class="line">└── hexo-pagination<span class="variable">@0</span>.0.2 (utils-merge<span class="variable">@1</span>.0.0)</span><br><span class="line"></span><br><span class="line">hexo-generator-archive<span class="variable">@0</span>.1.2 node_modules\hexo-generator-archive</span><br><span class="line">├── object-assign<span class="variable">@2</span>.0.0</span><br><span class="line">└── hexo-pagination<span class="variable">@0</span>.0.2 (utils-merge<span class="variable">@1</span>.0.0)</span><br><span class="line"></span><br><span class="line">hexo-<span class="keyword">renderer</span>-marked<span class="variable">@0</span>.2.5 node_modules\hexo-<span class="keyword">renderer</span>-marked</span><br><span class="line">├── object-assign<span class="variable">@2</span>.0.0</span><br><span class="line">├── marked<span class="variable">@0</span>.3.3</span><br><span class="line">├── <span class="keyword">strip</span>-indent<span class="variable">@1</span>.0.1 (get-stdin<span class="variable">@4</span>.0.1)</span><br><span class="line">└── hexo-util<span class="variable">@0</span>.1.6 (ent<span class="variable">@2</span>.2.0, bluebird<span class="variable">@2</span>.9.25, highlight.js<span class="variable">@8</span>.5.0)</span><br><span class="line"></span><br><span class="line">hexo-<span class="keyword">renderer</span>-stylus<span class="variable">@0</span>.2.3 node_modules\hexo-<span class="keyword">renderer</span>-stylus</span><br><span class="line">├── stylus<span class="variable">@0</span>.50.0 (css-parse<span class="variable">@1</span>.7.0, mkdirp<span class="variable">@0</span>.3.5, sax<span class="variable">@0</span>.5.8, <span class="keyword">source</span>-map<span class="variable">@0</span>.1.43, debug<span class="variable">@2</span>.1.3, glob<span class="variable">@3</span>.2.11)</span><br><span class="line">└── nib<span class="variable">@1</span>.1.0 (stylus<span class="variable">@0</span>.49.3)</span><br><span class="line"></span><br><span class="line">hexo-server<span class="variable">@0</span>.1.2 node_modules\hexo-server</span><br><span class="line">├── object-assign<span class="variable">@2</span>.0.0</span><br><span class="line">├── open<span class="variable">@0</span>.0.5</span><br><span class="line">├── mime<span class="variable">@1</span>.3.4</span><br><span class="line">├── bluebird<span class="variable">@2</span>.9.25</span><br><span class="line">├── chalk<span class="variable">@0</span>.5.1 (ansi-styles<span class="variable">@1</span>.1.0, escape-<span class="keyword">string</span>-regexp<span class="variable">@1</span>.0.3, supports-<span class="keyword">color</span><span class="variable">@0</span>.2.0, <span class="keyword">strip</span>-ansi<span class="variable">@0</span>.3.0, has-ansi<span class="variable">@0</span>.1.0)</span><br><span class="line">├── compression<span class="variable">@1</span>.4.3 (vary<span class="variable">@1</span>.0.0, on-headers<span class="variable">@1</span>.0.0, bytes<span class="variable">@1</span>.0.0, debug<span class="variable">@2</span>.1.3, compressible<span class="variable">@2</span>.0.2, accepts<span class="variable">@1</span>.2.5)</span><br><span class="line">├── morgan<span class="variable">@1</span>.5.2 (basic-auth<span class="variable">@1</span>.0.0, depd<span class="variable">@1</span>.0.1, debug<span class="variable">@2</span>.1.3, on-finished<span class="variable">@2</span>.2.1)</span><br><span class="line">├── connect<span class="variable">@3</span>.3.5 (utils-merge<span class="variable">@1</span>.0.0, parseurl<span class="variable">@1</span>.3.0, debug<span class="variable">@2</span>.1.3, finalhandler<span class="variable">@0</span>.3.4)</span><br><span class="line">└── serve-static<span class="variable">@1</span>.9.2 (utils-merge<span class="variable">@1</span>.0.0, escape-html<span class="variable">@1</span>.0.1, parseurl<span class="variable">@1</span>.3.0, send<span class="variable">@0</span>.12.2)</span><br></pre></td></tr></table></figure>
<p>默认安装了：</p>
<ul>
<li><a href="https://github.com/hexojs/hexo-renderer-ejs" target="_blank" rel="external">hexo-renderer-ejs</a>   <a href="https://github.com/tj/ejs" target="_blank" rel="external">EJS</a>渲染器</li>
<li><a href="https://github.com/hexojs/hexo-generator-index" target="_blank" rel="external">hexo-generator-index</a>   用来配置每页展示文章的数目</li>
<li><a href="https://github.com/hexojs/hexo-generator-tagtps://github.com/hexojs/hexo-generator-index" target="_blank" rel="external">hexo-generator-tag</a> 标签生成</li>
<li><a href="https://github.com/hexojs/hexo-generator-categoryr-tagtps://github.com/hexojs/hexo-generator-index" target="_blank" rel="external">hexo-generator-category</a> 目录生成</li>
<li><a href="https://github.com/hexojs/hexo-generator-archive" target="_blank" rel="external">hexo-generator-archive</a> 文章生成</li>
<li><a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="external">hexo-renderer-marked</a> markdown 渲染器</li>
<li><a href="https://github.com/hexojs/hexo-renderer-stylus" target="_blank" rel="external">hexo-renderer-stylus</a> CSS渲染器</li>
<li><a href="https://github.com/hexojs/hexo-server" target="_blank" rel="external">hexo-server</a> Server module for Hexo</li>
</ul>
<p>安装其他常用的插件：</p>
<pre><code>$ npm <span class="operator"><span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span>
$ npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span>
$ npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span>
$ npm <span class="keyword">install</span> hexo-fs <span class="comment">--save</span>
$ npm <span class="keyword">install</span> hexo-renderer-mathjax <span class="comment">--save</span></span>
</code></pre><ul>
<li><p><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a> </p>
<blockquote>
<p>Git deployer plugin for Hexo.</p>
</blockquote>
</li>
<li><p><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a></p>
<blockquote>
<p>Feed generator for Hexo.</p>
</blockquote>
</li>
<li><p><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">hexo-generator-sitemap</a></p>
<blockquote>
<p>Sitemap generator for Hexo</p>
</blockquote>
</li>
<li><p><a href="https://github.com/hexojs/hexo-fs" target="_blank" rel="external">hexo-fs</a></p>
<blockquote>
<p>文件 IO 为了要使用mathjax模块</p>
</blockquote>
</li>
<li><p><a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="external">hexo-renderer-mathjax</a></p>
<blockquote>
<p>Add support of MathJax for Hexo.</p>
</blockquote>
</li>
</ul>
<p>更多的插件参见<a href="http://hexo.io/plugins/" target="_blank" rel="external">官网插件列表</a> 或者 <a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank" rel="external">Github上的列表</a></p>
<h3 id="配置_Hexo">配置 Hexo</h3><p> 初始化目录</p>
<pre><code><span class="variable">$ </span>git init
</code></pre><p>创建<code>source</code>分支</p>
<pre><code>$ git checkout -<span class="tag">b</span> source
</code></pre><h4 id="安装与配置主题">　安装与配置主题</h4><ul>
<li>fork 主题</li>
</ul>
<p>从<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题列表</a> 挑选自己喜欢的主题,然后fork到自己的repos，这里使用的是Wiki主题Wixo</p>
<blockquote>
<p>wiki for hexo </p>
</blockquote>
<p>选取 w i x o</p>
<ul>
<li>修改主题配置文件</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd .. <span class="comment">#切换到上级目录</span></span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/zhiyue</span><span class="regexp">/hexo-theme-wixo themes/wixo</span></span><br></pre></td></tr></table></figure>
<p>修改完成后再push上GitHub上</p>
<ul>
<li>下载主题</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd <span class="constant">Wiki </span>    <span class="comment">#切换到Wiki目录</span></span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/zhiyue</span><span class="regexp">/hexo-theme-wixo themes/wixo</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用主题<br>去全局配置文件 <code>_config.yml</code> 修改参数</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## <span class="string">Plugins:</span> <span class="string">http:</span><span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## <span class="string">Themes:</span> <span class="string">http:</span><span class="comment">//hexo.io/themes/</span></span><br><span class="line"><span class="string">theme:</span> wixo #这里修改为主题的名字</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置主题<br><code>wixo</code>主题配置：</p>
</li>
</ul>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rss</span>: <span class="string">atom.xml</span></span><br><span class="line"><span class="attribute">fancybox</span>: <span class="string">true</span></span><br><span class="line"><span class="attribute">favicon</span>: <span class="string">favicon.ico</span></span><br><span class="line"><span class="attribute">fold</span>: <span class="string">true</span></span><br><span class="line"><span class="attribute">google_analytics:</span></span><br></pre></td></tr></table></figure>
<p>这个不同的主题配置会很不一样，下面这个是<code>modernist</code>主题的配置<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  <span class="attribute">Home</span>: /</span><br><span class="line">  <span class="attribute">Archives</span>: /archives</span><br><span class="line"><span class="attribute">rss</span>: /atom.xml</span><br><span class="line"></span><br><span class="line"><span class="attribute">archive_date_format</span>: MMM DD</span><br><span class="line"><span class="attribute">fancybox</span>: true</span><br><span class="line"></span><br><span class="line"><span class="attribute">duoshuo_shortname</span>: zhiyue</span><br><span class="line"></span><br><span class="line"><span class="attribute">google_analytics</span>:</span><br><span class="line"><span class="attribute">favicon</span>: /favicon.ico</span><br></pre></td></tr></table></figure></p>
<ul>
<li>使用子模块管理主题</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git submodule add <span class="symbol">https:</span>/<span class="regexp">/github.com/zhiyue</span><span class="regexp">/hexo-theme-wixo.git themes/wixo</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/git_submodule.png" alt="此处输入图片的描述"></p>
<ul>
<li>主题的更新<br>如果fork的主题作者有更新，可以在GitHub上pull过来然后再合并，然后在自己的blog的目录下要注意一下子模块的更新模式</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git submodule init </span><br><span class="line"><span class="variable">$ </span>git submodule update</span><br><span class="line"><span class="variable">$ </span>cd themes/wixo</span><br><span class="line"><span class="variable">$ </span>git checkout <span class="constant">HEAD </span> <span class="comment">#切换到最新的head</span></span><br><span class="line"><span class="variable">$ </span>cd -</span><br><span class="line"><span class="variable">$ </span>git add.</span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">"update submodule "</span> <span class="comment">#更新submodule的标记</span></span><br></pre></td></tr></table></figure>
<h4 id="全局配置">　全局配置</h4><p>修改_config.yml 文件只需修改几个，通常需要修改的地方:</p>
<ul>
<li>站点名称</li>
<li>URL格式</li>
<li>归档设置</li>
<li>disqus评论用户名</li>
<li>部署配置</li>
</ul>
<blockquote>
<p>注意冒号后面添加一个半角空格 再设置参数</p>
</blockquote>
<p>下面是我的<code>_config.yml</code>的配置<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Hexo Configuration</span></span><br><span class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="preprocessor">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Site</span></span><br><span class="line"><span class="label">title:</span> zhiyue   <span class="preprocessor">## 网站标题</span></span><br><span class="line"><span class="label">subtitle:</span>       <span class="preprocessor">## 网站副标题</span></span><br><span class="line"><span class="label">description:</span>    <span class="preprocessor">## 网站描述</span></span><br><span class="line"><span class="label">author:</span> zhiyue  <span class="preprocessor">## 您的名字</span></span><br><span class="line"><span class="label">language:</span> zh_CN <span class="preprocessor">## 网站使用的语言</span></span><br><span class="line"><span class="label">timezone:</span>       <span class="preprocessor">## 网站时区。Hexo 预设使用您电脑的时区</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># URL</span></span><br><span class="line"><span class="preprocessor">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="preprocessor">##如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 ##root 设为 /blog/。</span></span><br><span class="line"><span class="label">url:</span> http://blog.printf.me              <span class="preprocessor">## 网址</span></span><br><span class="line"><span class="label">root:</span> /                                 <span class="preprocessor">## 网站根目录</span></span><br><span class="line"><span class="label">permalink:</span> :year/:month/:day/:title/    <span class="preprocessor">## 文章的 永久链接 格式</span></span><br><span class="line"><span class="label">permalink_defaults:</span>                     <span class="preprocessor">## 永久链接中各部分的默认值 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Directory</span></span><br><span class="line"><span class="label">source_dir:</span> source          <span class="preprocessor">## 资源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line"><span class="label">public_dir:</span> public          <span class="preprocessor">## 公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="label">tag_dir:</span> tags               <span class="preprocessor">## 标签文件夹</span></span><br><span class="line"><span class="label">archive_dir:</span> archives       <span class="preprocessor">## 归档文件夹</span></span><br><span class="line"><span class="label">category_dir:</span> categories    <span class="preprocessor">## 分类文件夹</span></span><br><span class="line"><span class="label">code_dir:</span> downloads/code    <span class="preprocessor">## Include code 文件夹</span></span><br><span class="line"><span class="label">i18n_dir:</span> :lang             <span class="preprocessor">## 国际化（i18n）文件夹</span></span><br><span class="line"><span class="label">skip_render:</span>                <span class="preprocessor">## 跳过指定文件的渲染，您可使用 glob 来配置路径。</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Writing</span></span><br><span class="line"><span class="label">new_post_name:</span> :title.md                <span class="preprocessor">## File name of new posts</span></span><br><span class="line"><span class="label">default_layout:</span> post                    <span class="preprocessor">## 预设布局</span></span><br><span class="line"><span class="label">titlecase:</span> false                        <span class="preprocessor">## Transform title into titlecase</span></span><br><span class="line"><span class="label">external_link:</span> true                     <span class="preprocessor">## Open external links in new tab</span></span><br><span class="line"><span class="label">filename_case:</span> <span class="number">0</span>                        <span class="preprocessor">## 把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="label">render_drafts:</span> false                    <span class="preprocessor">## 显示草稿</span></span><br><span class="line"><span class="label">post_asset_folder:</span> false                <span class="preprocessor">## 启动 Asset 文件夹</span></span><br><span class="line"><span class="label">relative_link:</span> false                    <span class="preprocessor">## 把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="label">future:</span> true                            <span class="preprocessor">## 显示未来的文章</span></span><br><span class="line"><span class="label">highlight:</span>                              <span class="preprocessor">## 代码块的设置</span></span><br><span class="line">  enable: true                          <span class="preprocessor">## 启用</span></span><br><span class="line">  line_number: true                     <span class="preprocessor">## 行号</span></span><br><span class="line">  tab_replace: true                     <span class="preprocessor">## tab 替换</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Category &amp; Tag</span></span><br><span class="line"><span class="label">default_category:</span> uncategorized         <span class="preprocessor">## 默认分类</span></span><br><span class="line"><span class="label">category_map:</span>                           <span class="preprocessor">## 分类别名</span></span><br><span class="line"><span class="label">tag_map:</span>                                <span class="preprocessor">## 标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Date / Time format</span></span><br><span class="line"><span class="preprocessor">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="preprocessor">## You can customize the date format as defined in</span></span><br><span class="line"><span class="preprocessor">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="label">date_format:</span> YYYY-MM-DD                 <span class="preprocessor">## 日期格式</span></span><br><span class="line"><span class="label">time_format:</span> HH:mm:ss                   <span class="preprocessor">## 时间格式</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Pagination</span></span><br><span class="line"><span class="preprocessor">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="label">per_page:</span> <span class="number">10</span>                            <span class="preprocessor">## 每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="label">pagination_dir:</span> page                    <span class="preprocessor">## 分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Extensions</span></span><br><span class="line"><span class="preprocessor">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="preprocessor">## Themes: http://hexo.io/themes/</span></span><br><span class="line"><span class="label">theme:</span> modernist                        <span class="preprocessor">## 当前主题名称</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Deployment</span></span><br><span class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="label">deploy:</span>                                 <span class="preprocessor">##部署</span></span><br><span class="line">  type:</span><br></pre></td></tr></table></figure></p>
<h3 id="写文章">写文章</h3><pre><code>$ hexo <span class="built_in">new</span> <span class="built_in">post</span> <span class="string">"tiltle"</span>
</code></pre><p>这样就会在<code>source/_post/</code>下创建一个<code>tiltle.md</code><br>Hexo使用markdown语法的纯文本存放文章 后缀为.md 你可以在_post文件夹里面新建这个后缀的.md文件使用的全是UTF-8编码</p>
<p>格式如下：</p>
<pre><code><span class="label">title:</span> title <span class="preprocessor">#文章标题</span>
<span class="label">date:</span> <span class="number">2015</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">47</span>:<span class="number">44</span> <span class="preprocessor">#文章生成时间</span>
<span class="label">categories:</span> <span class="preprocessor">#文章分类目录 可以省略</span>
<span class="label">tags:</span> <span class="preprocessor">#文章标签 可以省略</span>
<span class="label">description:</span> <span class="preprocessor">#你对本页的描述 可以省略</span>
</code></pre><p>多标签注意语法格式 如下:<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  -<span class="ruby"> 标签<span class="number">1</span></span><br><span class="line"></span>  -<span class="ruby"> 标签<span class="number">2</span></span><br><span class="line"></span>  -<span class="ruby"> 标签<span class="number">3</span></span><br><span class="line"></span>  -<span class="ruby"> etc...</span></span><br></pre></td></tr></table></figure></p>
<p>正文中可以使用<!--more-->设置文章摘要 如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上是文章摘要</span><br><span class="line">  <span class="comment">&lt;!--more--&gt;</span></span><br><span class="line">  以下是余下全文</span><br></pre></td></tr></table></figure></p>
<h3 id="生成与部署">生成与部署</h3><ul>
<li>生成blog静态文件：</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br></pre></td></tr></table></figure>
<p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/hexo_g.png" alt="此处输入图片的描述"></p>
<ul>
<li>在本地环境测试：</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo s</span><br></pre></td></tr></table></figure>
<p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/preview.png" alt="此处输入图片的描述"></p>
<h4 id="GitHub_配置">GitHub 配置</h4><ul>
<li>创建gh-pages分支<br>如果要部署在github上，必须名称叫gh-pages。所以先创建一个叫gh-pages的分支</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git checkout --orphan gh-pages</span><br><span class="line"><span class="variable">$ </span>git rm -rf .    <span class="comment"># 砍掉所有档案重來</span></span><br><span class="line"><span class="comment"># 加新档案</span></span><br><span class="line"><span class="comment">## git add .</span></span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">'create new branch'</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>提交到GitHub<br>在GitHub创建一个新的repos，然后再本地使用以下命令：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote add origin <span class="symbol">https:</span>/<span class="regexp">/github.com/</span>(github用户名)/(项目名称).git  <span class="comment">##添加远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push --all origin                           <span class="comment">##push</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义域名设置<br>在<code>source</code>文件夹下创建<code>CNAME</code>文件 写入你的自定义域名</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog<span class="class">.printf</span><span class="class">.me</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置dnspod<br>添加<code>CNAME</code>记录 记录值<code>zhiyue.github.io.</code><br><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/dnspod.png" alt="此处输入图片的描述"></p>
</li>
<li><p>404 页面 和 favicon.ico<br>在<code>source</code>文件夹下 创建<code>404.html</code> 和 把<code>favicon.ico</code> 放置至此</p>
</li>
<li><p>deploy 配置<br>修改_config.yml文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## <span class="string">Docs:</span> <span class="string">http:</span><span class="comment">//hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="string">deploy:</span></span><br><span class="line"><span class="label">  type:</span> git</span><br><span class="line"><span class="label">  message:</span> update</span><br><span class="line"><span class="label">  repo:</span> <span class="string">https:</span><span class="comment">//github.com/zhiyue/blog.git</span></span><br><span class="line"><span class="label">  branch:</span> gh-pages</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置travis_ci">配置travis ci</h3><ul>
<li><p>生成<code>Personal access tokens</code><br>在<a href="https://github.com/settings/tokens" target="_blank" rel="external">GitHub token 生成页面</a>按照以下步骤生成一个可以让第三方访问的<code>token</code>，它具有可以写<code>repos</code>的权限。这样就可以在生成网站的时候通过这个<code>token</code>提交到<code>repos</code>上了。<br><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/generate_token.png" alt="generate token"></p>
</li>
<li><p>启用<code>travis ci</code><br>登陆<a href="https://travis-ci.org" target="_blank" rel="external">travis ci</a>绑定GitHub的账户，<code>travis ci</code>会同步<code>repos</code>的列表，选择你想启用自动化测试的<code>repos</code><br><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/travis.png" alt="travis ci "></p>
</li>
<li><p>编写<code>.travis.yml</code><br><code>travis ci</code>会依据<code>.travis.yml</code>进行一些环境的设置安装以及后续的测试。下面的<code>.travis.yml</code>是参考网上的yml编写的</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># Deploy hexo site by travis-ci</span><br><span class="line"># https://github.com/jkeylu/deploy-hexo-site-by-travis-ci</span><br><span class="line"># LICENSE: MIT</span><br><span class="line">#</span><br><span class="line"># 1. Copy this file to the root of your repository, then rename it to '.travis.yml'</span><br><span class="line"># 2. Replace 'YOUR NAME' and 'YOUR EMAIL' at line 29</span><br><span class="line"># 3. Add an Environment Variable 'DEPLOY_REPO'</span><br><span class="line">#     1. Generate github access token on https://github.com/settings/applications#personal-access-tokens</span><br><span class="line">#     2. Add an Environment Variable on https://travis-ci.org/&#123;github username&#125;/&#123;repository name&#125;/settings/env_vars</span><br><span class="line">#         Variable Name: DEPLOY_REPO</span><br><span class="line">#         Variable Value: https://&#123;githb access token&#125;@github.com/&#123;github username&#125;/&#123;repository name&#125;.git </span><br><span class="line">#         Example: DEPLOY_REPO=https://6b75cfe9836f56e6d21187622730889874476c23@github.com/jkeylu/test-hexo-on-travis-ci.git</span><br><span class="line"></span><br><span class="line">language: node_js</span><br><span class="line"></span><br><span class="line">node_js:</span><br><span class="line">  -<span class="ruby"> <span class="string">"0.12"</span>  <span class="comment">#设置node_js的版本</span></span><br><span class="line"></span></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    -<span class="ruby"> source    <span class="comment">#检测的分支，一旦分支有新的提交就会触发脚本</span></span><br><span class="line"></span></span><br><span class="line">before_install: #安装前的工作</span><br><span class="line">-<span class="ruby"> npm install -g hexo-cli</span><br><span class="line"></span></span><br><span class="line">install:</span><br><span class="line">#- npm install hexo-renderer-ejs@0.1.0 --save</span><br><span class="line">#- npm install hexo-renderer-marked@0.1.0 --save</span><br><span class="line">#- npm install hexo-renderer-stylus@0.1.0 --save</span><br><span class="line">#- npm install hexo-generator-feed@0.2.1 --save</span><br><span class="line">#- npm install hexo-generator-sitemap@0.2.0 --save</span><br><span class="line">#- npm install hexo-tag-bootstrap@0.0.6 --save</span><br><span class="line">-<span class="ruby"> npm install</span><br><span class="line"></span></span><br><span class="line"></span><br><span class="line">script:                         #运行的测试脚本</span><br><span class="line">  -<span class="ruby"> <span class="string">"git submodule init"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"git submodule update"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"hexo generate "</span></span><br><span class="line"></span>  </span><br><span class="line">after_success:                      #push到github上</span><br><span class="line">  -<span class="ruby"> <span class="string">"git clone $DEPLOY_REPO git_deploy"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"cd git_deploy"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"git checkout gh-pages"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"cd .."</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"rm -r git_deploy/*"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"cp -r public/* git_deploy"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"cd git_deploy"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"git config --global push.default simple"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"git config --global user.name 'zhiyue'"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"git config --global user.email cszhiyue@gmail.com"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"git add -A"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"git commit -m 'Site updated'"</span></span><br><span class="line"></span>  -<span class="ruby"> <span class="string">"git push -q"</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置环境变量<code>DEPLOY_REPO</code><br> <code>.travis.yml</code>中用到的<code>DEPLOY_REPO</code>可以按照图片的步骤设置</p>
</li>
</ul>
<p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/create_var.png" alt="genertare var"></p>
<ul>
<li>travis ci 自动化生成与部署</li>
</ul>
<p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/test.png" alt="此处输入图片的描述"></p>
<ul>
<li>网站截图：</li>
</ul>
<p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/wiki_2.png" alt="此处输入图片的描述"></p>
<h2 id="0x03_参考：">0x03 参考：</h2><ul>
<li><a href="http://ippotsuko.com/build-your-hexo-blog-3/" target="_blank" rel="external">Hexo 3.0 靜態博客使用指南</a></li>
<li><a href="http://segmentfault.com/a/1190000000406019" target="_blank" rel="external">使用Jekyll在Github上搭建个人博客（将本地博客上传至github）</a></li>
<li><a href="https://ihower.tw/blog/archives/5691" target="_blank" rel="external">如何建立一個沒有 Parent 的獨立 Git branch</a></li>
<li><a href="http://blog.csdn.net/u010520912/article/details/18993001" target="_blank" rel="external">使用Git将本地代码上传到GitHub</a></li>
</ul>
<hr>
<p>todo:</p>
<ul>
<li>补充其他系统的详细情况</li>
<li>补充多说插件和谷歌analyse</li>
<li><del>详细补充配置文件</del></li>
<li><del>加配图</del></li>
</ul>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>2015-4-30 第一次编写</li>
</ul>
<hr>
<p><img src="http://7xilqm.com1.z0.glb.clouddn.com/Hexo_wiki/Hexo.png" alt="此处输入图片的描述"></p>
<h2 id="0x01准备：">0x01准备：</h2><ol>
<li><a href="http://twitter.com/tommy351">tommy351</a>编写的静态博客框架<a href="http://hexo.io/">Hexo</a>（目前版本是3.0.x）</li>
<li><a href="https://github.com/wzpan/hexo-theme-wixo/">Wixo</a>的主题</li>
<li>GitHub的repos的gh-pages 分支放置wiki，托管于GitHub的Pages服务上</li>
<li>源码放置在Github同一个repos下的source分支下进行版本管理</li>
<li><a href="https://travis-ci.org/">Travis CI</a>自动化测试框架自动编译网站</li>
</ol>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://wiki.printf.me/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mathjax]]></title>
    <link href="http://wiki.printf.me/2015/04/28/test-mathjax/"/>
    <id>http://wiki.printf.me/2015/04/28/test-mathjax/</id>
    <published>2015-04-28T22:26:19.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>$$<br>\frac{\partial u}{\partial t} = h^2 \left( \frac{\partial^2 u}{\partial x^2} + \frac{\partial^2 u}{\partial y^2} + \frac{\partial^2 u}{\partial z^2}\right)<br>$$</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>$$<br>\frac{\partial u}{\partial t} = h^2 \left( \frac{\partial^2 u}{\partial x^2} + \frac{\partial^2 u}{\partial y^2} + \frac{\partial^2]]>
    </summary>
    
      <category term="Tests" scheme="http://wiki.printf.me/categories/Tests/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建Hexo blog写作环境]]></title>
    <link href="http://wiki.printf.me/2015/03/12/Hexo%E5%86%99%E4%BD%9C%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://wiki.printf.me/2015/03/12/Hexo写作平台搭建/</id>
    <published>2015-03-12T14:17:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>2015-3-12 更新  完成使用GitHub搭建Hexo博客的记录</p>
<hr>
<h3 id="GitHub_篇"><strong>GitHub 篇</strong></h3><p>使用GitHub Pages 搭建 独立博客，就是利用GitHub上对于每个单独的项目都可以设置演示与介绍的页面，简单来说就是创立 <code>gh-pages</code> 的分支。</p>
<h3 id="首先你得有一个GitHub的账号">首先你得有一个GitHub的账号</h3><ul>
<li>前往 <a href="https://github.com" target="_blank" rel="external">GitHub 官网地址</a>  注册一个账号 <ul>
<li>创建一个<code>repo</code></li>
<li>创建<code>gh-pages</code> branch</li>
</ul>
</li>
</ul>
<hr>
<h3 id="可以使用GitHub的二级域名_或者_购买一个域名">可以使用GitHub的二级域名 或者 购买一个域名</h3><ul>
<li><p><a href="https://www.Godaddy.com" target="_blank" rel="external">Daddy</a> 购买域名</p>
</li>
<li><p><a href="https://www.dnspod.cn/" target="_blank" rel="external">dnspod</a> 解析域名</p>
</li>
</ul>
<hr>
<h3 id="在本地搭建_Hexo">在本地搭建 Hexo</h3><h4 id="搭建Git环境">搭建Git环境</h4><h4 id="搭建nodejs开发环境">搭建nodejs开发环境</h4><h4 id="安装Hexo">安装Hexo</h4><h4 id="安装Hexo_的主题">安装Hexo 的主题</h4><ul>
<li>初始化blog目录 </li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS I:\GitHub\diary&gt; hexo init</span><br><span class="line">[info] Copying data</span><br><span class="line">[info] You are almost done! Don't forget <span class="keyword">to</span> <span class="command">run</span> `npm install` <span class="keyword">before</span> you start blogging <span class="keyword">with</span> Hexo!</span><br></pre></td></tr></table></figure>
<ul>
<li>下载<code>Hexo</code>主题</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS <span class="string">I:</span>\GitHub\diary&gt; git clone <span class="string">https:</span><span class="comment">//github.com/iissnan/hexo-theme-next themes/next</span></span><br><span class="line">Cloning into <span class="string">'themes/next'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">2190</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">110</span>/<span class="number">110</span>), done.</span><br><span class="line"><span class="string">rRemote:</span> Total <span class="number">2190</span> (delta <span class="number">50</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">2073</span></span><br><span class="line"> KiB/s</span><br><span class="line">Receiving <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">2190</span><span class="regexp">/2190), 4.98 MiB | 56.00 KiB/</span>s, done.</span><br><span class="line">Resolving <span class="string">deltas:</span> <span class="number">100</span>% (<span class="number">1145</span>/<span class="number">1145</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">PS <span class="string">I:</span>\GitHub\diary&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>设置 <code>Hexo</code></li>
</ul>
<hr>
<h3 id="结合_travis_自动生成网页文件">结合 travis 自动生成网页文件</h3><hr>
<h3 id="结合prose-io_在线书写">结合prose.io 在线书写</h3><hr>
<h3 id="结合koding-com_在线编译器_在线书写">结合koding.com 在线编译器 在线书写</h3><hr>
<h3 id="VPS_篇"><strong>VPS 篇</strong></h3><p>待续。。。</p>
<h3 id="更多：">更多：</h3><ul>
<li><a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="https://github.com/hexojs/hexo/wiki/themes" target="_blank" rel="external">Hexo 主题目录</a></li>
<li><a href="http://hexo.io/" target="_blank" rel="external">Hexo 官网</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>2015-3-12 更新  完成使用GitHub搭建Hexo博客的记录</p>
<hr>
<h3 id="GitHub_篇"><strong>GitHub 篇</strong></h3><p>使用GitHub Pages 搭建 独立博客，就是利用GitHub上对于每个单独的]]>
    </summary>
    
      <category term="Hexo" scheme="http://wiki.printf.me/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 多标签]]></title>
    <link href="http://wiki.printf.me/2014/06/09/hexo-%E5%A4%9A%E6%A0%87%E7%AD%BE/"/>
    <id>http://wiki.printf.me/2014/06/09/hexo-多标签/</id>
    <published>2014-06-09T16:21:56.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>刚开始使用hexo记录一下使用过程遇到的问题.<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用多标签要在括号内<span class="keyword">*</span><span class="keyword">*</span>[,]<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">在括号内用逗号分隔开.</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>刚开始使用hexo记录一下使用过程遇到的问题.<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span clas]]>
    </summary>
    
      <category term="Hexo" scheme="http://wiki.printf.me/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Questions and Answers]]></title>
    <link href="http://wiki.printf.me/2014/03/16/qna/"/>
    <id>http://wiki.printf.me/2014/03/16/qna/</id>
    <published>2014-03-16T18:17:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p><span class="label label-danger">Q</span> What does <code>Wixo</code> stands for?</p>
<p><span class="label label-success">A</span> <code>Wixo</code> means A <strong>wi</strong>ki theme for he<strong>xo</strong>.</p>
<p><span class="label label-danger">Q</span> How to generate ToC(Table of Contents) in a certain page?</p>
<p><span class="label label-success">A</span> Add <code>toc: true</code> in the <a href="https://github.com/wzpan/hexo-theme-freemind#front-matter" target="_blank" rel="external">front-matter</a>.</p>
<p><span class="label label-danger">Q</span> Where can I find your markdown source files of these docs?</p>
<p><span class="label label-success">A</span> In the <a href="https://github.com/wzpan/hexo-theme-wixo/tree/source" target="_blank" rel="external">source</a> branch.</p>
<p><span class="label label-danger">Q</span> Why my boostrap tags always break lines? How to avoid that?</p>
<p><span class="label label-success">A</span> The problem is due to the markdown settings. Try to disable the <code>breaks</code> config in your root _config.yml. <em>e.g.</em></p>
<script src="https://gist.github.com/wzpan/9967986.js"></script>
]]></content>
    <summary type="html">
    <![CDATA[<p><span class="label label-danger">Q</span> What does <code>Wixo</code> stands for?</p>
<p><span class="label label-success">A</span> <code]]>
    </summary>
    
      <category term="Docs" scheme="http://wiki.printf.me/categories/Docs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Questions and Answers（中文）]]></title>
    <link href="http://wiki.printf.me/2014/03/16/qna-cn/"/>
    <id>http://wiki.printf.me/2014/03/16/qna-cn/</id>
    <published>2014-03-16T18:10:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p><span class="label label-danger">Q</span> <code>Wixo</code> 这名字有何含义？</p>
<p><span class="label label-success">A</span> <code>Wixo</code> 意思是 A <strong>wi</strong>ki theme for he<strong>xo</strong> 。</p>
<p><span class="label label-danger">Q</span> 如何指定某些页面生成 ToC(Table of Contents) ？</p>
<p><span class="label label-success">A</span> 在<a href="https://github.com/wzpan/hexo-theme-freemind#front-matter" target="_blank" rel="external">文章头部</a>添加 <code>toc: true</code> 。</p>
<p><span class="label label-danger">Q</span> 从哪里可以找到你的这几篇文档的 Markdown 源码？</p>
<p><span class="label label-success">A</span> 在项目的 <a href="https://github.com/wzpan/hexo-theme-wixo/tree/source" target="_blank" rel="external">source</a> 分支。</p>
<p><span class="label label-danger">Q</span> 为啥我在插入 bootstrap 插件后总是自动折行？</p>
<p><span class="label label-success">A</span> 这个问题是你的 Markdown 设置引起的。解决办法是在你的 Hexo 的 _config.yml 文件中禁用 Markdown 的 <code>breaks</code> 选项：</p>
<script src="https://gist.github.com/wzpan/9967986.js"></script>
]]></content>
    <summary type="html">
    <![CDATA[<p><span class="label label-danger">Q</span> <code>Wixo</code> 这名字有何含义？</p>
<p><span class="label label-success">A</span> <code>Wixo</code> ]]>
    </summary>
    
      <category term="Docs" scheme="http://wiki.printf.me/categories/Docs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tag Plugins]]></title>
    <link href="http://wiki.printf.me/2014/03/16/tag-plugins/"/>
    <id>http://wiki.printf.me/2014/03/16/tag-plugins/</id>
    <published>2014-03-16T10:17:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>Like the <a href="http://github.com/wzpan/hexo-theme-freemind" target="_blank" rel="external">Freemind</a> theme, you can use <a href="https://github.com/wzpan/hexo-tag-bootstrap" target="_blank" rel="external">hexo-tag-bootstrap</a> to fully take advantages of Bootstrap. To use these tag plugins, you need to install it first. In your blog root folder, execute the following command:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-tag-bootstrap <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<p>Then you can use these tag plugins in your blog, as easily as you normally do using hexo tag plugins. </p>
<a id="more"></a>
<h2 id="Text_Color">Text Color</h2><p>Convey meaning through color with a handful of emphasis utility classes. These may also be applied to links and will darken on hover just like our default link styles.</p>
<h3 id="Syntax">Syntax</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% textcolor [style] <span class="variable">%&#125;</span></span><br><span class="line">  <span class="keyword">text</span> <span class="keyword">string</span></span><br><span class="line">&#123;% endtextcolor <span class="variable">%&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Examples">Examples</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% textcolor muted <span class="variable">%&#125;</span>Fusce dapibus, tellus ac cursus commodo, tortor mauris nibh.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor primary <span class="variable">%&#125;</span>Nullam id dolor id nibh ultricies vehicula ut id elit.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor success <span class="variable">%&#125;</span>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor info <span class="variable">%&#125;</span>Maecenas sed diam eget risus varius blandit sit amet non magna.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor <span class="keyword">warning</span> <span class="variable">%&#125;</span>Etiam porta sem malesuada magna mollis euismod.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor danger <span class="variable">%&#125;</span>Donec ullamcorper nulla non metus auctor fringilla.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Results">Results</h3><p class="text-muted">Fusce dapibus, tellus ac cursus commodo, tortor mauris nibh.</p>

<p class="text-primary">Nullam id dolor id nibh ultricies vehicula ut id elit.</p>
<p class="text-success">Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>

<p class="text-info">Maecenas sed diam eget risus varius blandit sit amet non magna.</p>
<p class="text-warning">Etiam porta sem malesuada magna mollis euismod.</p>

<p class="text-danger">Donec ullamcorper nulla non metus auctor fringilla.</p>
<h2 id="Buttons">Buttons</h2><p>Inserts a button with target links, text and specified color.</p>
<h3 id="Syntax-1">Syntax</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;% btn url text <span class="collection">[style]</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Examples-1">Examples</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack primary %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack success %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack warning %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack danger %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack info %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Results-1">Results</h3><a class="btn btn-default" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-primary" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-success" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-warning" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-danger" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-info" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<h2 id="Labels">Labels</h2><p>Inserts a label with text and specified color.</p>
<h3 id="Syntax-2">Syntax</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;% label text <span class="collection">[style]</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Examples-2">Examples</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">label</span> default <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> warinng warning <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> success success <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> danger danger <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> primary primary <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> info info %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Results-2">Results</h3><span class="label label-default">default</span>
<span class="label label-warning">warinng</span>
<span class="label label-success">success</span>
<span class="label label-danger">danger</span>
<span class="label label-primary">primary</span>
<span class="label label-info">info</span>
<h2 id="Badges">Badges</h2><p>Inserts a badge with text.</p>
<div class="alert alert-danger"><i class="fa fa-bug"></i>  Badges won't self collapse in Internet Explorer 8 because it lacks support for the `:empty` selector.</div>

### Syntax ###

<!--￼7-->

### Examples ###

<!--￼8-->

### Results ###

<span class="badge">42</span>

## Alerts ##

Inserts alert messages with text and specified color.

### Syntax ###

<!--￼9-->

### Examples ###

<!--￼10-->

### Results ###

<div class="alert alert-warning"><i class="fa fa-bell"></i>  Best check yo self, you're not looking too good.</div>
<div class="alert alert-danger"><i class="fa fa-bug"></i>  Change a few things up and try submitting again.</div>

<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  You successfully read this important alert message.</div>
<div class="alert alert-info"><i class="fa fa-info"></i>  This alert needs your attention, but it's not super important.</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Like the <a href="http://github.com/wzpan/hexo-theme-freemind">Freemind</a> theme, you can use <a href="https://github.com/wzpan/hexo-tag-bootstrap">hexo-tag-bootstrap</a> to fully take advantages of Bootstrap. To use these tag plugins, you need to install it first. In your blog root folder, execute the following command:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-tag-bootstrap <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<p>Then you can use these tag plugins in your blog, as easily as you normally do using hexo tag plugins. </p>]]>
    
    </summary>
    
      <category term="Docs" scheme="http://wiki.printf.me/categories/Docs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tag Plugins（中文）]]></title>
    <link href="http://wiki.printf.me/2014/03/16/tag-plugins-cn/"/>
    <id>http://wiki.printf.me/2014/03/16/tag-plugins-cn/</id>
    <published>2014-03-16T10:10:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>和 <a href="http://github.com/wzpan/hexo-theme-freemind" target="_blank" rel="external">Freemind</a> 一样，你可以使用 <a href="https://github.com/wzpan/hexo-tag-bootstrap" target="_blank" rel="external">hexo-tag-bootstrap</a> 来充分发挥 Bootstrap 的威力。在你的 Hexo 博客目录，执行下列命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-tag-bootstrap <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<p>然后就可以像使用其他 hexo tag plugins 一样使用这些 Bootstrap tag plugins 了。</p>
<h2 id="文本颜色">文本颜色</h2><p>插入一段文本，并用特殊的颜色高亮它。</p>
<h3 id="语法">语法</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% textcolor [style] <span class="variable">%&#125;</span></span><br><span class="line">  <span class="keyword">text</span> <span class="keyword">string</span></span><br><span class="line">&#123;% endtextcolor <span class="variable">%&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="示例">示例</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% textcolor muted <span class="variable">%&#125;</span>Fusce dapibus, tellus ac cursus commodo, tortor mauris nibh.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor primary <span class="variable">%&#125;</span>Nullam id dolor id nibh ultricies vehicula ut id elit.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor success <span class="variable">%&#125;</span>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor info <span class="variable">%&#125;</span>Maecenas sed diam eget risus varius blandit sit amet non magna.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor <span class="keyword">warning</span> <span class="variable">%&#125;</span>Etiam porta sem malesuada magna mollis euismod.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% textcolor danger <span class="variable">%&#125;</span>Donec ullamcorper nulla non metus auctor fringilla.&#123;% endtextcolor <span class="variable">%&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="结果">结果</h3><p class="text-muted">Fusce dapibus, tellus ac cursus commodo, tortor mauris nibh.</p>

<p class="text-primary">Nullam id dolor id nibh ultricies vehicula ut id elit.</p>
<p class="text-success">Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>

<p class="text-info">Maecenas sed diam eget risus varius blandit sit amet non magna.</p>
<p class="text-warning">Etiam porta sem malesuada magna mollis euismod.</p>

<p class="text-danger">Donec ullamcorper nulla non metus auctor fringilla.</p>
<h2 id="按钮（Buttons）">按钮（Buttons）</h2><p>插入一个按钮，按钮可以带有链接、文本，并可以指定样式。</p>
<h3 id="语法-1">语法</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;% btn url text <span class="collection">[style]</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="示例-1">示例</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack primary %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack success %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack warning %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack danger %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% btn <span class="string">http:</span><span class="comment">//hahack.com hahack info %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="结果-1">结果</h3><a class="btn btn-default" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-primary" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-success" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-warning" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-danger" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<a class="btn btn-info" href="http://hahack.com" target="_blank" rel="external">hahack</a>
<h2 id="标签（Labels）">标签（Labels）</h2><p>插入一个标签，并为其指定文本和样式。</p>
<h3 id="语法-2">语法</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;% label text <span class="collection">[style]</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="示例-2">示例</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">label</span> default <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> warinng warning <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> success success <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> danger danger <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> primary primary <span class="envvar">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%</span> <span class="built_in">label</span> info info %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-2">结果</h3><span class="label label-default">default</span>
<span class="label label-warning">warinng</span>
<span class="label label-success">success</span>
<span class="label label-danger">danger</span>
<span class="label label-primary">primary</span>
<span class="label label-info">info</span>
<h2 id="徽章（Badges）">徽章（Badges）</h2><p>插入一个徽章，并为其指定文本。</p>
<h3 id="语法-3">语法</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="preprocessor">%</span> badge text <span class="preprocessor">%</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例-3">示例</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="preprocessor">%</span> badge <span class="number">42</span> <span class="preprocessor">%</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-3">结果</h3><span class="badge">42</span>
<h2 id="警报（Alerts）">警报（Alerts）</h2><p>插入一段警报文本信息，并为其指定样式。</p>
<h3 id="语法-4">语法</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% alert [style] <span class="variable">%&#125;</span></span><br><span class="line">   Alert <span class="keyword">string</span></span><br><span class="line">&#123;% endalert <span class="variable">%&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="示例-4">示例</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% alert warning %&#125;Best<span class="instruction"> check </span>yo self, you're<span class="instruction"> not </span>looking too good.&#123;% endalert %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% alert danger %&#125;Change a few things up<span class="instruction"> and </span>try submitting again.&#123;% endalert %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% alert success %&#125;You successfully read this important alert message.&#123;% endalert %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% alert info %&#125;This alert needs your attention, but it's<span class="instruction"> not </span>super important.&#123;% endalert %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-4">结果</h3><div class="alert alert-warning"><i class="fa fa-bell"></i>  Best check yo self, you're not looking too good.</div>

<div class="alert alert-danger"><i class="fa fa-bug"></i>  Change a few things up and try submitting again.</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  You successfully read this important alert message.</div>

<div class="alert alert-info"><i class="fa fa-info"></i>  This alert needs your attention, but it's not super important.</div>
]]></content>
    <summary type="html">
    <![CDATA[<p>和 <a href="http://github.com/wzpan/hexo-theme-freemind" target="_blank" rel="external">Freemind</a> 一样，你可以使用 <a href="https://github.com/]]>
    </summary>
    
      <category term="Docs" scheme="http://wiki.printf.me/categories/Docs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lorem Ipsum]]></title>
    <link href="http://wiki.printf.me/2014/03/15/lorem-ipsum/"/>
    <id>http://wiki.printf.me/2014/03/15/lorem-ipsum/</id>
    <published>2014-03-15T20:17:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<p><img src="/hexo-theme-wixo/images/lorem-ipsum/lorem-ipsum.jpg" alt="Lorem Ipsum"></p>
<a id="more"></a>
<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<p><img src="/hexo-theme-wixo/images/lorem-ipsum/lorem-ipsum.jpg" alt="Lorem Ipsum"></p>]]>
    
    </summary>
    
      <category term="Tests" scheme="http://wiki.printf.me/categories/Tests/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code Highlight]]></title>
    <link href="http://wiki.printf.me/2014/03/15/code-highlight/"/>
    <id>http://wiki.printf.me/2014/03/15/code-highlight/</id>
    <published>2014-03-15T20:17:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<h2 id="C">C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C++">C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="JAVA">JAVA</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helloWorld</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Assembler">Assembler</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &#60;stdio.h&#62;&#10;&#10;char format[] = &#34;%s %s\n&#34;;&#10;char hello[] = &#34;Hello&#34;;&#10;char world[] = &#34;world&#34;;&#10;void main( void )&#10;&#123;&#10;   __asm&#10;   &#123;&#10;      mov  eax, offset world&#10;      push eax&#10;      mov  eax, offset hello&#10;      push eax&#10;      mov  eax, offset format&#10;      push eax&#10;      call printf&#10;      pop  ebx&#10;      pop  ebx&#10;      pop  ebx&#10;   &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C#">C#</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// Hello World .NET&#10;&#10;#using &#60;mscorlib.dll&#62;&#10;using namespace System;&#10;&#10;int _tmain()&#10;&#123;&#10;    Console::WriteLine(S&#34;Hello World&#34;);&#10;    return 0;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Erlang">Erlang</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="pp"><span class="keyword">-module</span><span class="params">(hello)</span></span>.</span><br><span class="line"><span class="pp"><span class="keyword">-export</span><span class="params">([world/<span class="number">0</span>])</span></span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">world</span><span class="params">()</span> -&gt;</span> <span class="function_name">io:format</span>(<span class="string">"Hello World"</span>).</span><br></pre></td></tr></table></figure>
<h2 id="Ruby">Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/ruby -w</span></span><br><span class="line">puts <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<h2 id="BASIC">BASIC</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// Texas Instruments TI-81 BASIC&#10;Prgm1:HELLO...&#10;:Disp &#34;HELLO WORLD&#34;</span><br></pre></td></tr></table></figure>
<h2 id="Perl">Perl</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin perl -w  </span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Hello World"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Python">Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line">print(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Bash">Bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<h2 id="Brainfuck">Brainfuck</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">-</span><span class="title">]</span>&lt;<span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">-</span><span class="title">]</span>&lt;<span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="title">[</span><span class="literal">-</span><span class="title">]</span></span><br><span class="line">&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">-</span><span class="title">]</span> &lt;<span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">-</span><span class="title">]</span>&lt;<span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="title">[</span><span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">-</span> <span class="title">]</span>&lt;<span class="literal">+</span><span class="string">.</span><span class="title">[</span><span class="literal">-</span><span class="title">]</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></span><br></pre></td></tr></table></figure>
<h2 id="php">php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?</span>=<span class="string">"Hello world\n"</span> <span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Pascal">Pascal</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Program HelloWorld;&#10;&#10;Begin&#10;  Writeln (&#39;Hello World!&#39;);&#10;End.</span><br></pre></td></tr></table></figure>
<h2 id="Delphi">Delphi</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delphi, thanks to C0derr</span></span><br><span class="line"><span class="keyword">program</span> Project1;</span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  qdialogs;</span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  s=<span class="string">'Hello, World!'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  showmessage(s);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="C">C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C++">C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Tests" scheme="http://wiki.printf.me/categories/Tests/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[繁體中文測試]]></title>
    <link href="http://wiki.printf.me/2013/12/25/traditional-chinese-test/"/>
    <id>http://wiki.printf.me/2013/12/25/traditional-chinese-test/</id>
    <published>2013-12-25T21:17:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>觀自在菩薩，行深般若波羅蜜多時，照見五蘊皆空，度一切苦厄。</p>
<p>舍利子，色不異空，空不異色；色即是空，空即是色。受、想、行、識，亦復如是。</p>
<p>舍利子，是諸法空相，不生不滅，不垢不淨，不增不減，是故空中無色，無受、想、行、識；無眼、耳、鼻、舌、身、意；無色、聲、香、味、觸、法；無眼界，乃至無意識界；無無明，亦無無明盡；乃至無老死，亦無老死盡。無苦、集、滅、道，無智亦無得，以無所得故。</p>
<p>菩提薩埵(<code>duǒ</code>)，依般若波羅蜜多故，心無罣礙(<code>guà ài</code>)。無罣礙，故無有恐怖，遠離顛倒夢想，究竟涅槃。三世諸佛，依般若波羅蜜多故，得阿耨多羅三藐三菩提。<a id="more"></a></p>
<p>故知般若波羅蜜多，是大神咒，是大明咒，是無上咒，是無等等咒，能除一切苦，真實不虛。</p>
<p>故說般若波羅蜜多咒，即說咒曰：</p>
<blockquote>
<p>揭諦、揭諦，波羅揭諦，波羅僧揭諦，菩提薩婆訶。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>觀自在菩薩，行深般若波羅蜜多時，照見五蘊皆空，度一切苦厄。</p>
<p>舍利子，色不異空，空不異色；色即是空，空即是色。受、想、行、識，亦復如是。</p>
<p>舍利子，是諸法空相，不生不滅，不垢不淨，不增不減，是故空中無色，無受、想、行、識；無眼、耳、鼻、舌、身、意；無色、聲、香、味、觸、法；無眼界，乃至無意識界；無無明，亦無無明盡；乃至無老死，亦無老死盡。無苦、集、滅、道，無智亦無得，以無所得故。</p>
<p>菩提薩埵(<code>duǒ</code>)，依般若波羅蜜多故，心無罣礙(<code>guà ài</code>)。無罣礙，故無有恐怖，遠離顛倒夢想，究竟涅槃。三世諸佛，依般若波羅蜜多故，得阿耨多羅三藐三菩提。]]>
    
    </summary>
    
      <category term="Tests" scheme="http://wiki.printf.me/categories/Tests/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简体中文测试]]></title>
    <link href="http://wiki.printf.me/2013/12/25/simplified-chinese-test/"/>
    <id>http://wiki.printf.me/2013/12/25/simplified-chinese-test/</id>
    <published>2013-12-25T20:17:16.000Z</published>
    <updated>2015-05-09T07:56:56.259Z</updated>
    <content type="html"><![CDATA[<p>观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。</p>
<p>舍利子，色不异空，空不异色；色即是空，空即是色。受、想、行、识，亦复如是。</p>
<p>舍利子，是诸法空相，不生不灭，不垢不净，不增不减，是故空中无色，无受、想、行、识；无眼、耳、鼻、舌、身、意；无色、声、香、味、触、法；无眼界，乃至无意识界；无无明，亦无无明尽；乃至无老死，亦无老死尽。无苦、集、灭、道，无智亦无得，以无所得故。</p>
<p>菩提萨埵(<code>duǒ</code>)，依般若波罗蜜多故，心无罣碍(<code>guà ài</code>)。无罣碍，故无有恐怖，远离颠倒梦想，究竟涅盘。三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提。<a id="more"></a></p>
<p>故知般若波罗蜜多，大神咒，是大明咒，是无上咒，是无等等咒，能除一切苦，真实不虚。</p>
<p>故说般若波罗蜜多咒， 即说咒曰，</p>
<blockquote>
<p>揭谛揭谛 波罗揭谛 波罗僧揭谛 菩提萨婆诃</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。</p>
<p>舍利子，色不异空，空不异色；色即是空，空即是色。受、想、行、识，亦复如是。</p>
<p>舍利子，是诸法空相，不生不灭，不垢不净，不增不减，是故空中无色，无受、想、行、识；无眼、耳、鼻、舌、身、意；无色、声、香、味、触、法；无眼界，乃至无意识界；无无明，亦无无明尽；乃至无老死，亦无老死尽。无苦、集、灭、道，无智亦无得，以无所得故。</p>
<p>菩提萨埵(<code>duǒ</code>)，依般若波罗蜜多故，心无罣碍(<code>guà ài</code>)。无罣碍，故无有恐怖，远离颠倒梦想，究竟涅盘。三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提。]]>
    
    </summary>
    
      <category term="Tests" scheme="http://wiki.printf.me/categories/Tests/"/>
    
  </entry>
  
</feed>